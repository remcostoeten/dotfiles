#!/usr/bin/env bash

# Secrets Sync Plugin
# Provides automatic sync triggers, hooks, and seamless integration

function install_secrets_sync() {
    echo.debug "Installing secrets-sync plugin..."
    
    # Ensure required dependencies are available
    local deps=("gh" "jq" "curl" "openssl")
    local missing_deps=()
    
    for dep in "${deps[@]}"; do
        if ! command -v "$dep" &>/dev/null; then
            missing_deps+=("$dep")
        fi
    done
    
    if [[ ${#missing_deps[@]} -gt 0 ]]; then
        echo.debug "Missing dependencies: ${missing_deps[*]} - secrets-sync plugin disabled"
        return 1
    fi
    
    echo.debug "Secrets-sync plugin dependencies satisfied"
    return 0
}

function configure_secrets_sync() {
    echo.debug "Configuring secrets-sync plugin..."
    
    # Create hook for environment changes
    local env_change_hook="$DOTFILES_UTILS/.env-changed"
    
    # Set up file watcher if available (optional enhancement)
    if command -v inotifywait &>/dev/null; then
        echo.debug "inotify available - setting up file watcher"
        setup_secrets_sync_watcher
    elif command -v fswatch &>/dev/null; then
        echo.debug "fswatch available - setting up file watcher"  
        setup_secrets_sync_fswatch
    else
        echo.debug "No file watcher available - using hook-based sync"
    fi
    
    return 0
}

function load_secrets_sync() {
    # Only load if sync is configured
    if [[ ! -f "$HOME/.env-vault/sync_url" ]]; then
        echo.debug "Secrets sync not configured - skipping plugin load"
        return 0
    fi
    
    echo.debug "Loading secrets-sync plugin..."
    
    # Set up environment change hook
    setup_env_change_hook
    
    # Add aliases for convenience
    alias secrets-status='dotfiles-secrets-bootstrap status'
    alias secrets-sync='dotfiles sync'
    alias secrets-discover='dotfiles-secrets-bootstrap discover'
    alias secrets-push='dotfiles sync push'
    alias secrets-pull='dotfiles sync pull'
    
    # Set up auto-sync if enabled
    if [[ "${DOTFILES_AUTO_SYNC:-0}" == "1" ]]; then
        setup_auto_sync_triggers
    fi
    
    echo.debug "Secrets-sync plugin loaded"
}

function setup_env_change_hook() {
    local hook_file="$DOTFILES_UTILS/.env-change-hook"
    
    # Create the hook script
    cat > "$hook_file" << 'EOF'
#!/usr/bin/env bash

# Environment change hook - triggers sync operations
ENV_CHANGE_MARKER="$DOTFILES_UTILS/.env-changed"
SYNC_DEBOUNCE_DELAY=3

function trigger_sync() {
    if [[ "${DOTFILES_AUTO_SYNC:-0}" == "1" ]]; then
        # Create change marker
        touch "$ENV_CHANGE_MARKER"
        
        # Debounced sync - only sync after delay with no new changes
        (
            sleep $SYNC_DEBOUNCE_DELAY
            if [[ -f "$ENV_CHANGE_MARKER" ]]; then
                rm -f "$ENV_CHANGE_MARKER"
                echo "ðŸ”„ Auto-syncing environment changes..."
                if command -v dotfiles &>/dev/null; then
                    dotfiles sync push >/dev/null 2>&1 &
                fi
            fi
        ) &
    fi
}

trigger_sync
EOF
    
    chmod +x "$hook_file"
}

function setup_auto_sync_triggers() {
    echo.debug "Setting up auto-sync triggers..."
    
    # Hook into ZSH exit trap for session-end sync
    if [[ "$DOTFILES_SHELL" == "zsh" ]]; then
        setup_zsh_exit_hook
    fi
    
    # Set up periodic sync (optional)
    if [[ "${DOTFILES_PERIODIC_SYNC:-0}" == "1" ]]; then
        setup_periodic_sync
    fi
}

function setup_zsh_exit_hook() {
    # Add exit hook to sync on shell exit
    local exit_hook='
    function secrets_sync_exit_hook() {
        if [[ "${DOTFILES_AUTO_SYNC:-0}" == "1" && -f "$HOME/.env-vault/sync_url" ]]; then
            echo "ðŸ”„ Syncing secrets before exit..."
            dotfiles sync push >/dev/null 2>&1 || true
        fi
    }
    
    # Add to ZSH exit traps
    trap secrets_sync_exit_hook EXIT
    '
    
    # Only add if not already present
    if ! grep -q "secrets_sync_exit_hook" "$HOME/.zshrc" 2>/dev/null; then
        echo "$exit_hook" >> "$DOTFILES_UTILS/zsh_secrets_hook.zsh"
    fi
}

function setup_secrets_sync_watcher() {
    local watcher_script="$DOTFILES_UTILS/secrets_watcher.sh"
    
    cat > "$watcher_script" << 'EOF'
#!/usr/bin/env bash

# File system watcher for environment changes
ENV_DB="$DOTFILES_UTILS/env.json"
SYNC_DEBOUNCE=5

if [[ ! -f "$ENV_DB" ]]; then
    echo "No environment database to watch"
    exit 0
fi

echo "Watching environment database for changes..."

inotifywait -m -e modify,move,create,delete "$ENV_DB" --format '%w%f %e %T' --timefmt '%Y-%m-%d %H:%M:%S' | while read file event time; do
    echo "[$time] Environment change detected: $event on $file"
    
    if [[ "${DOTFILES_AUTO_SYNC:-0}" == "1" ]]; then
        echo "Triggering auto-sync in ${SYNC_DEBOUNCE}s..."
        (
            sleep $SYNC_DEBOUNCE
            dotfiles sync push >/dev/null 2>&1 && echo "âœ“ Auto-sync completed"
        ) &
    fi
done
EOF

    chmod +x "$watcher_script"
    
    # Start watcher in background if auto-sync is enabled
    if [[ "${DOTFILES_AUTO_SYNC:-0}" == "1" ]]; then
        nohup "$watcher_script" >/dev/null 2>&1 &
        echo.debug "Started environment watcher (PID: $!)"
    fi
}

function setup_secrets_sync_fswatch() {
    local watcher_script="$DOTFILES_UTILS/secrets_fswatch.sh"
    
    cat > "$watcher_script" << 'EOF'
#!/usr/bin/env bash

# FSWatch-based file system watcher for environment changes
ENV_DB="$DOTFILES_UTILS/env.json"
SYNC_DEBOUNCE=5

if [[ ! -f "$ENV_DB" ]]; then
    echo "No environment database to watch"
    exit 0
fi

echo "Watching environment database with fswatch..."

fswatch -o "$ENV_DB" | while read num; do
    echo "Environment change detected (events: $num)"
    
    if [[ "${DOTFILES_AUTO_SYNC:-0}" == "1" ]]; then
        echo "Triggering auto-sync in ${SYNC_DEBOUNCE}s..."
        (
            sleep $SYNC_DEBOUNCE
            dotfiles sync push >/dev/null 2>&1 && echo "âœ“ Auto-sync completed"
        ) &
    fi
done
EOF

    chmod +x "$watcher_script"
    
    # Start watcher in background if auto-sync is enabled
    if [[ "${DOTFILES_AUTO_SYNC:-0}" == "1" ]]; then
        nohup "$watcher_script" >/dev/null 2>&1 &
        echo.debug "Started fswatch environment watcher (PID: $!)"
    fi
}

function setup_periodic_sync() {
    local sync_interval="${DOTFILES_SYNC_INTERVAL:-3600}" # Default 1 hour
    
    echo.debug "Setting up periodic sync every ${sync_interval}s"
    
    (
        while true; do
            sleep "$sync_interval"
            if [[ -f "$HOME/.env-vault/sync_url" && "${DOTFILES_AUTO_SYNC:-0}" == "1" ]]; then
                echo "ðŸ•’ Periodic secrets sync..."
                dotfiles sync push >/dev/null 2>&1 || true
            fi
        done
    ) &
    
    echo.debug "Started periodic sync (PID: $!, interval: ${sync_interval}s)"
}

function secrets_sync_help() {
    echo.header "Secrets Sync Plugin"
    echo
    echo.info "This plugin provides automatic sync triggers and enhanced integration."
    echo
    echo.cyan "Environment Variables:"
    echo "  DOTFILES_AUTO_SYNC=1       Enable automatic syncing"
    echo "  DOTFILES_PERIODIC_SYNC=1   Enable periodic background sync"
    echo "  DOTFILES_SYNC_INTERVAL=N   Periodic sync interval in seconds (default: 3600)"
    echo
    echo.cyan "Aliases:"
    echo "  secrets-status    Show secrets bootstrap status"
    echo "  secrets-sync      Quick sync command"
    echo "  secrets-discover  Discover existing gists"  
    echo "  secrets-push      Push secrets to gist"
    echo "  secrets-pull      Pull secrets from gist"
    echo
    echo.info "Features:"
    echo "â€¢ File system monitoring for automatic sync"
    echo "â€¢ Debounced sync to prevent excessive operations"
    echo "â€¢ Shell exit hooks for session-end sync"
    echo "â€¢ Optional periodic background sync"
    echo "â€¢ Integration with existing dotfiles commands"
}

# Plugin initialization
function secrets_sync_init() {
    echo.debug "Initializing secrets-sync plugin..."
    
    if install_secrets_sync && configure_secrets_sync; then
        load_secrets_sync
        echo.debug "Secrets-sync plugin initialized successfully"
    else
        echo.warning "Failed to initialize secrets-sync plugin"
        return 1
    fi
}

# Auto-initialize if sourced directly
secrets_sync_init

# Help function if called directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    secrets_sync_help
fi
