#!/usr/bin/env bash

# Dotfiles Help System - Main CLI
# Comprehensive, interactive help system for dotfiles
# Part of the dotfiles management system

set -euo pipefail

# --- Setup ---
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
DOTFILES_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"

# Simple environment setup without dependencies
export DOTFILES_ROOT
export DOTFILES_UTILS="${DOTFILES_ROOT}/utils"
export DOTFILES_HELP_MANIFEST="${DOTFILES_UTILS}/help_manifest.json"
export DOTFILES_HELP_DIR="${DOTFILES_ROOT}/helpers/help"

# Ensure required directories exist
mkdir -p "$DOTFILES_UTILS" "$DOTFILES_HELP_DIR" "${DOTFILES_ROOT}/docs/help" "${DOTFILES_ROOT}/logs" 2>/dev/null || true

# Load color functions if available
if [[ -f "$DOTFILES_ROOT/core/_colors" ]]; then
    source "$DOTFILES_ROOT/core/_colors"
else
    # Fallback color functions
    function echo.error() { echo -e "\\033[0;31m‚úó\\033[0m $*"; }
    function echo.success() { echo -e "\\033[0;32m‚úì\\033[0m $*"; }
    function echo.warning() { echo -e "\\033[1;33m‚ö†\\033[0m $*"; }
    function echo.info() { echo -e "\\033[0;36m‚Ñπ\\033[0m $*"; }
    function echo.cyan() { echo -e "\\033[0;36m$*\\033[0m"; }
    function echo.purple() { echo -e "\\033[0;35m$*\\033[0m"; }
    function echo.header() {
        echo -e "\\n\\033[1;34m‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\\033[0m"
        echo -e "\\033[1;34m                    $*\\033[0m"
        echo -e "\\033[1;34m‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\\033[0m\\n"
    }
fi

# Load help constants if available 
if [[ -f "$DOTFILES_ROOT/core/_help_constants" ]]; then
    source "$DOTFILES_ROOT/core/_help_constants" 2>/dev/null || true
fi

# --- State Variables ---
MANIFEST_LOADED=false
declare -A HELP_ENTRIES=()
declare -A HELP_CATEGORIES_COUNT=()

# --- Manifest Management ---
function load_manifest() {
    if [[ "$MANIFEST_LOADED" == true ]]; then
        return 0
    fi
    
    if [[ ! -f "$DOTFILES_HELP_MANIFEST" ]]; then
        echo.warning "Help manifest not found. Generating..."
        generate_manifest
        return $?
    fi
    
    # Check if jq is available for JSON parsing
    if ! command -v jq >/dev/null 2>&1; then
        echo.error "jq is required for help system. Install with: sudo apt install jq"
        return 1
    fi
    
    # Validate and load manifest
    if ! jq empty "$DOTFILES_HELP_MANIFEST" 2>/dev/null; then
        echo.error "Invalid manifest JSON. Regenerating..."
        generate_manifest
        return $?
    fi
    
    local total_entries
    total_entries=$(jq -r '.totalEntries // 0' "$DOTFILES_HELP_MANIFEST")
    
    if [[ "$total_entries" -eq 0 ]]; then
        echo.warning "Empty manifest. Regenerating..."
        generate_manifest
        return $?
    fi
    
    MANIFEST_LOADED=true
    echo.debug "Loaded manifest with $total_entries entries"
    return 0
}

function generate_manifest() {
    local generator="$DOTFILES_ROOT/modules/help/help-generator"
    local simple_generator="$DOTFILES_ROOT/modules/help/help-generator-simple"
    
    echo.info "üîÑ Regenerating help manifest..."
    
    # Try generators in order of preference
    local fixed_generator="$DOTFILES_ROOT/modules/help/help-generator-fixed"
    
    if [[ -x "$fixed_generator" ]] && "$fixed_generator" --force; then
        echo.success "‚ú® Manifest regenerated successfully (fixed generator)"
        MANIFEST_LOADED=false
        return 0
    elif [[ -x "$generator" ]] && DOTFILES_ROOT="$DOTFILES_ROOT" "$generator" --force 2>/dev/null; then
        echo.success "‚ú® Manifest regenerated successfully (full generator)"
        MANIFEST_LOADED=false
        return 0
    elif [[ -x "$simple_generator" ]] && "$simple_generator" --force; then
        echo.success "‚ú® Manifest regenerated successfully (simple generator)"
        MANIFEST_LOADED=false
        return 0
    else
        echo.error "Failed to generate manifest - no working generator found"
        return 1
    fi
}

# --- Search Functions ---
function search_entries() {
    local query="$1"
    local category_filter="${2:-}"
    
    if ! load_manifest; then
        return 1
    fi
    
    echo.header "üîç Search Results: \"$query\""
    
    local results_found=false
    local max_results=20
    local count=0
    
    # Build jq filter
    local jq_filter='.entries[] | select('
    
    # Search in title, synopsis, tags
    jq_filter+='(.title | test("'$query'"; "i")) or '
    jq_filter+='(.synopsis | test("'$query'"; "i")) or '
    jq_filter+='(.tags[]? | test("'$query'"; "i"))'
    
    # Add category filter if specified
    if [[ -n "$category_filter" ]]; then
        jq_filter+=' and (.category == "'$category_filter'")'
    fi
    
    jq_filter+=')'
    
    # Execute search
    while IFS=$'\\t' read -r id title category synopsis; do
        [[ -z "$id" ]] && continue
        [[ $count -ge $max_results ]] && break
        
        results_found=true
        ((count++))
        
        # Display result with colors
        echo.purple "  [$count] $title"
        echo.cyan "      Category: $category"
        echo "      $synopsis"
        echo
    done < <(jq -r "$jq_filter | [.id, .title, .category, .synopsis] | @tsv" "$DOTFILES_HELP_MANIFEST" 2>/dev/null || true)
    
    if [[ "$results_found" == false ]]; then
        echo.warning "No results found for: $query"
        echo.info "üí° Try a different search term or use 'dotfiles help' to browse categories"
    else
        echo.success "Found $count result(s)"
        echo.info "üí° Use 'dotfiles help <id>' to see details"
    fi
    
    return 0
}

function list_categories() {
    if ! load_manifest; then
        return 1
    fi
    
    echo.header "üìÇ Help Categories"
    
    # Count entries per category
    local categories_raw
    categories_raw=$(jq -r '.entries[].category' "$DOTFILES_HELP_MANIFEST" 2>/dev/null || echo "")
    
    declare -A category_counts=()
    while IFS= read -r category; do
        [[ -n "$category" ]] && ((category_counts[$category]++))
    done <<< "$categories_raw"
    
    # Display categories with counts
    local categories=("aliases" "commands" "scripts" "tools" "workflows" "references" "system" "development")
    
    for category in "${categories[@]}"; do
        local count=${category_counts[$category]:-0}
        if [[ $count -gt 0 ]]; then
            local icon=""
            case "$category" in
                aliases) icon="‚ö°" ;;
                commands) icon="üîß" ;;
                scripts) icon="üìú" ;;
                tools) icon="üõ†Ô∏è" ;;
                workflows) icon="üåä" ;;
                references) icon="üìñ" ;;
                system) icon="üíª" ;;
                development) icon="‚öôÔ∏è" ;;
                *) icon="üìÇ" ;;
            esac
            
            echo.purple "  $icon $category ($count entries)"
            echo.cyan "      Use: dotfiles help --category $category"
            echo
        fi
    done
    
    echo.info "üí° Use 'dotfiles help --search <term>' to search across all categories"
    return 0
}

function show_entry() {
    local entry_id="$1"
    
    if ! load_manifest; then
        return 1
    fi
    
    # Find entry by ID
    local entry_json
    entry_json=$(jq -r '.entries[] | select(.id == "'$entry_id'")' "$DOTFILES_HELP_MANIFEST" 2>/dev/null)
    
    if [[ -z "$entry_json" || "$entry_json" == "null" ]]; then
        echo.error "Help entry not found: $entry_id"
        echo.info "üí° Use 'dotfiles help --search' to find entries"
        return 1
    fi
    
    # Extract fields
    local title synopsis usage category icon
    title=$(echo "$entry_json" | jq -r '.title // ""')
    synopsis=$(echo "$entry_json" | jq -r '.synopsis // ""')  
    usage=$(echo "$entry_json" | jq -r '.usage // ""')
    category=$(echo "$entry_json" | jq -r '.category // ""')
    icon=$(echo "$entry_json" | jq -r '.icon // "üìÑ"')
    
    echo.header "$icon $title"
    
    echo.cyan "Category: $category"
    echo.purple "Description:"
    echo "  $synopsis"
    echo
    
    if [[ -n "$usage" ]]; then
        echo.cyan "Usage:"
        echo.purple "  $usage"
        echo
    fi
    
    # Show examples if available
    local examples
    examples=$(echo "$entry_json" | jq -r '.examples[]? | "  " + .description + ":\\n    " + .command' 2>/dev/null)
    if [[ -n "$examples" ]]; then
        echo.cyan "Examples:"
        echo -e "$examples"
        echo
    fi
    
    # Show related entries if available
    local see_also
    see_also=$(echo "$entry_json" | jq -r '.seeAlso[]?' 2>/dev/null)
    if [[ -n "$see_also" ]]; then
        echo.cyan "See Also:"
        echo "$see_also" | while read -r related; do
            echo.purple "  ‚Ä¢ dotfiles help $related"
        done
        echo
    fi
    
    return 0
}

function show_status() {
    echo.header "üìä Dotfiles Help System Status"
    
    if [[ -f "$DOTFILES_HELP_MANIFEST" ]]; then
        echo.success "‚úì Help manifest exists"
        
        if command -v jq >/dev/null 2>&1; then
            local total_entries generated_date version
            total_entries=$(jq -r '.totalEntries // 0' "$DOTFILES_HELP_MANIFEST" 2>/dev/null)
            generated_date=$(jq -r '.generated // "unknown"' "$DOTFILES_HELP_MANIFEST" 2>/dev/null)
            version=$(jq -r '.version // "unknown"' "$DOTFILES_HELP_MANIFEST" 2>/dev/null)
            
            echo.cyan "  ‚Ä¢ Version: $version"
            echo.cyan "  ‚Ä¢ Total entries: $total_entries"
            echo.cyan "  ‚Ä¢ Generated: $generated_date"
            
            # Show age
            if [[ "$generated_date" != "unknown" ]]; then
                local generated_epoch manifest_age
                generated_epoch=$(date -d "$generated_date" +%s 2>/dev/null || echo 0)
                manifest_age=$(( $(date +%s) - generated_epoch ))
                
                if [[ $manifest_age -lt 3600 ]]; then
                    echo.success "  ‚Ä¢ Age: $(( manifest_age / 60 )) minutes (recent)"
                elif [[ $manifest_age -lt 86400 ]]; then
                    echo.warning "  ‚Ä¢ Age: $(( manifest_age / 3600 )) hours"
                else
                    echo.error "  ‚Ä¢ Age: $(( manifest_age / 86400 )) days (consider regenerating)"
                fi
            fi
        else
            echo.warning "  ‚Ä¢ jq not available - limited functionality"
        fi
    else
        echo.warning "‚úó Help manifest missing"
        echo.info "  Run 'dotfiles help --reload' to generate"
    fi
    
    # Check dependencies
    echo
    echo.cyan "Dependencies:"
    local deps=("jq" "fzf" "rg")
    for dep in "${deps[@]}"; do
        if command -v "$dep" >/dev/null 2>&1; then
            echo.success "  ‚úì $dep"
        else
            echo.warning "  ‚úó $dep (optional but recommended)"
        fi
    done
    
    echo
    return 0
}

function usage() {
    echo.header "üå∏ Dotfiles Help System"
    echo
    echo.cyan "A comprehensive, interactive help system for your dotfiles"
    echo
    echo.purple "Usage:"
    echo "  dotfiles help                    Show main help menu"
    echo "  dotfiles help <entry-id>         Show specific help entry"
    echo "  dotfiles help --search <term>    Search help entries"
    echo "  dotfiles help --category <cat>   List entries in category"
    echo "  dotfiles help --categories       List all categories"
    echo "  dotfiles help --reload           Regenerate help manifest"
    echo "  dotfiles help --status           Show system status"
    echo "  dotfiles help --raw              Show raw manifest"
    echo
    echo.purple "Examples:"
    echo.cyan "  dotfiles help --search git"
    echo.cyan "  dotfiles help --category aliases"
    echo.cyan "  dotfiles help alias-ls"
    echo
    echo.purple "Categories:"
    echo.cyan "  aliases, commands, scripts, tools, workflows, references, system, development"
    echo
    echo.info "üí° The help system auto-discovers content from your dotfiles"
    echo.info "üîÑ Run 'dotfiles help --reload' after adding new aliases or scripts"
    echo
}

function interactive_menu() {
    if ! load_manifest; then
        return 1
    fi
    
    echo.header "üå∏ Interactive Help Menu"
    echo.info "Loading interactive interface..."
    
    # Check if fzf is available for enhanced experience
    if command -v fzf >/dev/null 2>&1; then
        run_fzf_interface
    else
        run_simple_menu
    fi
}

function run_fzf_interface() {
    echo.info "üöÄ Using fzf enhanced interface"
    
    # Create searchable list
    local temp_list
    temp_list=$(mktemp)
    
    # Extract entries for fzf
    jq -r '.entries[] | [.id, .category, .title, .synopsis] | join(" | ")' "$DOTFILES_HELP_MANIFEST" > "$temp_list"
    
    # Run fzf
    local selected
    selected=$(cat "$temp_list" | fzf \
        --height 60% \
        --layout=reverse \
        --border \
        --preview 'echo {} | cut -d"|" -f1 | xargs dotfiles help' \
        --preview-window up:50% \
        --prompt "üîç Search help entries: " \
        --header "Press Enter to view details, Esc to quit"
    ) || {
        rm -f "$temp_list"
        return 0
    }
    
    # Extract ID and show details
    local entry_id
    entry_id=$(echo "$selected" | cut -d'|' -f1 | xargs)
    
    rm -f "$temp_list"
    
    if [[ -n "$entry_id" ]]; then
        echo
        show_entry "$entry_id"
    fi
}

function run_simple_menu() {
    echo.info "üìã Simple menu interface (install fzf for enhanced experience)"
    
    while true; do
        echo
        echo.purple "Main Menu:"
        echo "  1. Browse by category"
        echo "  2. Search entries"  
        echo "  3. View all entries"
        echo "  4. Show status"
        echo "  5. Reload manifest"
        echo "  q. Quit"
        echo
        
        read -r -p "Choose option [1-5,q]: " choice
        echo
        
        case "$choice" in
            1)
                list_categories
                ;;
            2)
                read -r -p "Search term: " search_term
                [[ -n "$search_term" ]] && search_entries "$search_term"
                ;;
            3)
                jq -r '.entries[] | "  ‚Ä¢ " + .id + " (" + .category + "): " + .title' "$DOTFILES_HELP_MANIFEST"
                ;;
            4)
                show_status
                ;;
            5)
                generate_manifest
                MANIFEST_LOADED=false
                ;;
            q|Q|quit|exit)
                echo.info "Goodbye! üëã"
                break
                ;;
            *)
                echo.warning "Invalid option: $choice"
                ;;
        esac
    done
}

# --- Main Function ---
function main() {
    local search_term=""
    local category_filter=""
    local entry_id=""
    local show_categories=false
    local reload_manifest=false
    local show_raw=false
    local interactive=false
    
    # Parse arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            --search|-s)
                search_term="${2:-}"
                [[ -z "$search_term" ]] && { echo.error "Search term required"; exit 1; }
                shift 2
                ;;
            --category|-c)
                category_filter="${2:-}"
                [[ -z "$category_filter" ]] && { echo.error "Category required"; exit 1; }
                shift 2
                ;;
            --categories)
                show_categories=true
                shift
                ;;
            --reload|-r)
                reload_manifest=true
                shift
                ;;
            --status)
                show_status
                exit 0
                ;;
            --raw)
                show_raw=true
                shift
                ;;
            --help|-h)
                usage
                exit 0
                ;;
            --interactive|-i)
                interactive=true
                shift
                ;;
            --*)
                echo.error "Unknown option: $1"
                usage
                exit 1
                ;;
            *)
                entry_id="$1"
                shift
                ;;
        esac
    done
    
    # Handle reload first
    if [[ "$reload_manifest" == true ]]; then
        generate_manifest
        exit $?
    fi
    
    # Handle raw output
    if [[ "$show_raw" == true ]]; then
        if [[ -f "$DOTFILES_HELP_MANIFEST" ]]; then
            cat "$DOTFILES_HELP_MANIFEST"
        else
            echo.error "No manifest found. Run with --reload to generate."
            exit 1
        fi
        exit 0
    fi
    
    # Handle specific operations
    if [[ -n "$search_term" ]]; then
        search_entries "$search_term" "$category_filter"
    elif [[ -n "$category_filter" ]]; then
        search_entries "." "$category_filter"  # Match all in category
    elif [[ "$show_categories" == true ]]; then
        list_categories
    elif [[ -n "$entry_id" ]]; then
        show_entry "$entry_id"
    elif [[ "$interactive" == true ]]; then
        interactive_menu
    else
        # Default: show interactive menu or usage
        if [[ -t 0 && -t 1 ]]; then  # Interactive terminal
            interactive_menu
        else
            usage
        fi
    fi
}

# Run if called directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
