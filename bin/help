#!/usr/bin/env bash

# Simple Dotfiles Help System
# Clean, fast, and covers all aliases

set -euo pipefail

# Setup
DOTFILES_ROOT="${DOTFILES_ROOT:-$HOME/.config/dotfiles}"
source "$DOTFILES_ROOT/core/_colors" 2>/dev/null || {
    function echo.cyan() { echo -e "\033[0;36m$*\033[0m"; }
    function echo.purple() { echo -e "\033[0;35m$*\033[0m"; }
    function echo.success() { echo -e "\033[0;32m✓\033[0m $*"; }
    function echo.header() { echo -e "\n\033[1;34m$*\033[0m\n"; }
}

# Global arrays
declare -A ALIASES=()
declare -A ALIAS_DESCRIPTIONS=()
declare -A ALIAS_CATEGORIES=()

# Load all aliases
function load_aliases() {
    local aliases_dir="$DOTFILES_ROOT/modules/aliases"
    [[ ! -d "$aliases_dir" ]] && return
    
    for file in "$aliases_dir"/*.aliases; do
        [[ ! -f "$file" ]] && continue
        
        local category=$(basename "$file" .aliases)
        local pending_alias=""
        local pending_desc=""
        
        while IFS= read -r line || [[ -n "$line" ]]; do
            # Handle comment lines with @alias/@desc annotations
            if [[ "$line" =~ ^#[[:space:]]*@alias[[:space:]]+(.+)$ ]]; then
                pending_alias="${BASH_REMATCH[1]// /}"
                continue
            elif [[ "$line" =~ ^#[[:space:]]*@desc[[:space:]]+(.+)$ ]]; then
                pending_desc="${BASH_REMATCH[1]}"
                continue
            fi
            
            # Skip empty lines and other comments
            [[ -z "$line" || "$line" =~ ^[[:space:]]*# ]] && continue
            
            # Parse actual alias lines
            if [[ "$line" =~ ^[[:space:]]*alias[[:space:]]+([^=]+)=(.+)$ ]]; then
                local alias_name="${BASH_REMATCH[1]// /}"
                local alias_command="${BASH_REMATCH[2]}"
                
                # Clean up command (remove quotes)
                alias_command="${alias_command#\"}"
                alias_command="${alias_command%\"}"
                alias_command="${alias_command#\'}"
                alias_command="${alias_command%\'}"
                
                # Use pending description or generate one
                local description="${pending_desc:-"Executes: $alias_command"}"
                
                # Store alias info
                ALIASES["$alias_name"]="$alias_command"
                ALIAS_DESCRIPTIONS["$alias_name"]="$description"
                ALIAS_CATEGORIES["$alias_name"]="$category"
                
                # Reset pending
                pending_alias=""
                pending_desc=""
            fi
        done < "$file"
    done
}

# Show all aliases in static format
function show_static() {
    echo.header "📋 Dotfiles Aliases"
    
    # Group by category
    declare -A categories=()
    for alias in "${!ALIASES[@]}"; do
        local cat="${ALIAS_CATEGORIES[$alias]}"
        if [[ -z "${categories[$cat]:-}" ]]; then
            categories[$cat]="$alias"
        else
            categories[$cat]+=" $alias"
        fi
    done
    
    # Display each category
    for category in $(printf '%s\n' "${!categories[@]}" | sort); do
        echo.purple "━━━ $category ━━━"
        
        # Get all aliases for this category and sort them
        local aliases_in_category=()
        for alias in "${!ALIASES[@]}"; do
            if [[ "${ALIAS_CATEGORIES[$alias]}" == "$category" ]]; then
                aliases_in_category+=("$alias")
            fi
        done
        
        # Sort and display aliases
        IFS=$'\n' sorted=($(sort <<<"${aliases_in_category[*]}"))
        
        for alias_name in "${sorted[@]}"; do
            local cmd="${ALIASES[$alias_name]}"
            local desc="${ALIAS_DESCRIPTIONS[$alias_name]}"
            printf "  %-15s → %-30s %s\n" "$(echo.cyan "$alias_name")" "$cmd" "$desc"
        done
    done
    
    echo.success "Total: ${#ALIASES[@]} aliases across ${#categories[@]} categories"
}

# Interactive mode with fzf
function show_interactive() {
    if ! command -v fzf >/dev/null; then
        echo "⚠ fzf not available, showing static view"
        show_static
        return
    fi
    
    # Clear screen for better experience
    clear
    
    # Count unique categories
    declare -A unique_categories=()
    for alias_name in "${!ALIASES[@]}"; do
        unique_categories["${ALIAS_CATEGORIES[$alias_name]}"]="1"
    done
    
    # Enhanced header with stats
    echo -e "\n\033[1;38;5;39m╭─────────────────────────────────────────────────────────╮\033[0m"
    echo -e "\033[1;38;5;39m│\033[0m \033[1;38;5;226m🚀 Interactive Alias Browser\033[0m                     \033[1;38;5;39m│\033[0m"
    echo -e "\033[1;38;5;39m│\033[0m \033[0;38;5;242m${#ALIASES[@]} aliases across ${#unique_categories[@]} categories\033[0m                        \033[1;38;5;39m│\033[0m"
    echo -e "\033[1;38;5;39m╰─────────────────────────────────────────────────────────╯\033[0m"
    echo
    echo -e "\033[0;38;5;246m✨ Search by alias name, command, or description\033[0m"
    echo -e "\033[0;38;5;246m⚡ Press Enter to execute, Tab for details, Esc to quit\033[0m"
    echo
    
    # Create enhanced searchable list with better formatting
    local temp_file=$(mktemp)
    local temp_display=$(mktemp)
    
    # Count aliases per category for stats
    declare -A cat_counts=()
    for alias_name in "${!ALIASES[@]}"; do
        local cat="${ALIAS_CATEGORIES[$alias_name]}"
        ((cat_counts[$cat]++))
    done
    
    # Create formatted entries
    for alias_name in "${!ALIASES[@]}"; do
        local cmd="${ALIASES[$alias_name]}"
        local desc="${ALIAS_DESCRIPTIONS[$alias_name]}"
        local cat="${ALIAS_CATEGORIES[$alias_name]}"
        local cat_count="${cat_counts[$cat]}"
        
        # Data for processing
        echo "$alias_name|$cat|$cmd|$desc" >> "$temp_file"
        
        # Display format with better alignment and icons
        local icon=""
        case "$cat" in
            "git") icon="🐙" ;;
            "dev") icon="⚙️" ;;
            "general") icon="📦" ;;
            "dotfiles") icon="🏠" ;;
            "drizzle") icon="🗄️" ;;
            "help") icon="❓" ;;
            *) icon="📋" ;;
        esac
        
        # Truncate long commands for display
        local display_cmd="$cmd"
        if [[ ${#cmd} -gt 35 ]]; then
            display_cmd="${cmd:0:32}..."
        fi
        
        printf "%-12s %s %-8s → %-35s %s\n" \
            "$alias_name" \
            "$icon" \
            "[$cat]" \
            "$display_cmd" \
            "$desc" >> "$temp_display"
    done
    
    # Enhanced fzf configuration with better preview
    local selected
    selected=$(sort "$temp_display" | fzf \
        --height 90% \
        --layout=reverse \
        --border=double \
        --border-label=" 🎯 Fuzzy Alias Search " \
        --border-label-pos=2 \
        --prompt="🔍 " \
        --pointer="▶" \
        --marker="✓" \
        --header=$'╭──── Navigation ────╮\n│ ↑↓ Navigate  Tab Preview │\n│ Enter Execute  Esc Quit  │\n╰────────────────────────╯' \
        --header-lines=0 \
        --info=inline \
        --color=fg:#f8f8f2,bg:#282a36,hl:#8be9fd \
        --color=fg+:#f8f8f2,bg+:#44475a,hl+:#8be9fd \
        --color=info:#50fa7b,prompt:#ff79c6,pointer:#ff79c6 \
        --color=marker:#50fa7b,spinner:#ffb86c,header:#6272a4 \
        --color=border:#bd93f9,label:#f1fa8c \
        --preview-window=right:45%:wrap:border-left \
        --preview='
            # Extract alias name from the formatted line
            alias_name=$(echo {} | awk "{print \$1}")
            if [[ -n "$alias_name" ]]; then
                # Find the original data
                line=$(grep "^$alias_name|" '"$temp_file"' | head -1)
                if [[ -n "$line" ]]; then
                    IFS="|" read -r name category command description <<< "$line"
                    
                    # Enhanced preview with better formatting
                    echo -e "\033[1;38;5;226m╭─── Alias Details ───╮\033[0m"
                    echo -e "\033[1;38;5;226m│\033[0m \033[1;38;5;39m⚡ $name\033[0m"
                    echo -e "\033[1;38;5;226m├─────────────────────╮\033[0m"
                    echo -e "\033[1;38;5;226m│\033[0m \033[0;38;5;50mCategory:\033[0m \033[1;38;5;141m$category\033[0m"
                    echo -e "\033[1;38;5;226m│\033[0m"
                    echo -e "\033[1;38;5;226m│\033[0m \033[0;38;5;50mCommand:\033[0m"
                    # Word wrap long commands
                    echo -e "\033[1;38;5;226m│\033[0m \033[1;38;5;228m$command\033[0m" | fold -w 40 -s | sed "s/^/\033[1;38;5;226m│\033[0m /"
                    echo -e "\033[1;38;5;226m│\033[0m"
                    echo -e "\033[1;38;5;226m│\033[0m \033[0;38;5;50mDescription:\033[0m"
                    echo -e "\033[1;38;5;226m│\033[0m \033[0;38;5;246m$description\033[0m" | fold -w 40 -s | sed "s/^/\033[1;38;5;226m│\033[0m /"
                    echo -e "\033[1;38;5;226m╰─────────────────────╯\033[0m"
                    
                    # Show usage examples if available
                    case "$category" in
                        "git")
                            echo -e "\n\033[0;38;5;117m💡 Git workflow command\033[0m"
                            ;;
                        "dev")
                            echo -e "\n\033[0;38;5;117m💡 Development shortcut\033[0m"
                            ;;
                        "drizzle")
                            echo -e "\n\033[0;38;5;117m💡 Database management\033[0m"
                            ;;
                    esac
                fi
            fi
        ' \
        --bind='tab:toggle-preview' \
        --bind='ctrl-/:change-preview-window(down|hidden|right:45%:wrap)' \
        --bind='ctrl-r:reload(sort '"$temp_display"')' \
        --bind='ctrl-a:select-all' \
        --bind='ctrl-u:clear-query'
    )
    
    # Cleanup
    rm -f "$temp_file" "$temp_display"
    
    if [[ -n "$selected" ]]; then
        # Extract alias name from selected line
        local alias_name=$(echo "$selected" | awk '{print $1}')
        
        if [[ -n "${ALIASES[$alias_name]:-}" ]]; then
            clear
            echo -e "\n\033[1;38;5;39m╭─────────────────────────────────────────╮\033[0m"
            echo -e "\033[1;38;5;39m│\033[0m \033[1;38;5;226m⚡ Selected Alias: $alias_name\033[0m \033[1;38;5;39m│\033[0m"
            echo -e "\033[1;38;5;39m╰─────────────────────────────────────────╯\033[0m"
            echo
            echo -e "\033[0;38;5;50m📋 Command:\033[0m \033[1;38;5;228m${ALIASES[$alias_name]}\033[0m"
            echo -e "\033[0;38;5;50m📝 Description:\033[0m \033[0;38;5;246m${ALIAS_DESCRIPTIONS[$alias_name]}\033[0m"
            echo -e "\033[0;38;5;50m🏷️  Category:\033[0m \033[1;38;5;141m${ALIAS_CATEGORIES[$alias_name]}\033[0m"
            echo
            echo -e "\033[0;38;5;117m💡 You can now use: \033[1;38;5;228m$alias_name\033[0m"
            echo
        fi
    else
        echo -e "\n\033[0;38;5;242m👋 Search cancelled\033[0m"
    fi
}

# Search aliases
function search_aliases() {
    local query="$1"
    echo.header "🔍 Search Results: '$query'"
    
    local found=false
    for alias_name in "${!ALIASES[@]}"; do
        local cmd="${ALIASES[$alias_name]}"
        local desc="${ALIAS_DESCRIPTIONS[$alias_name]}"
        
        if [[ "$alias_name" =~ $query ]] || [[ "$cmd" =~ $query ]] || [[ "$desc" =~ $query ]]; then
            found=true
            printf "  %-12s → %-25s %s\n" "$(echo.cyan "$alias_name")" "$cmd" "$desc"
        fi
    done
    
    if [[ "$found" == false ]]; then
        echo "No aliases found matching: $query"
    fi
}

# Show specific alias
function show_alias() {
    local alias_name="$1"
    
    if [[ -z "${ALIASES[$alias_name]:-}" ]]; then
        echo "Alias '$alias_name' not found"
        echo
        echo "Available aliases:"
        printf '%s\n' "${!ALIASES[@]}" | sort | head -10
        [[ ${#ALIASES[@]} -gt 10 ]] && echo "... and $((${#ALIASES[@]} - 10)) more"
        return 1
    fi
    
    echo.header "⚡ $alias_name"
    echo.cyan "Command: ${ALIASES[$alias_name]}"
    echo.purple "Description: ${ALIAS_DESCRIPTIONS[$alias_name]}" 
    echo.success "Category: ${ALIAS_CATEGORIES[$alias_name]}"
}

# Usage help
function usage() {
    echo.header "📖 Help Usage"
    echo "Usage: help [options] [alias-name]"
    echo
    echo "Options:"
    echo "  (none)           Show all aliases (static)"
    echo "  -i, --interactive Interactive browser with fzf"
    echo "  -s, --search     Search aliases"
    echo "  -h, --help       Show this help"
    echo
    echo "Examples:"
    echo "  help             # Show all aliases"
    echo "  help -i          # Interactive browser"  
    echo "  help -s git      # Search for 'git'"
    echo "  help ls          # Show specific alias 'ls'"
    echo
}

# Main function
function main() {
    # Load all aliases first
    load_aliases
    
    case "${1:-}" in
        -h|--help)
            usage
            ;;
        -i|--interactive)
            show_interactive
            ;;
        -s|--search)
            [[ -z "${2:-}" ]] && { echo "Search term required"; exit 1; }
            search_aliases "$2"
            ;;
        "")
            show_static
            ;;
        *)
            show_alias "$1"
            ;;
    esac
}

main "$@"
