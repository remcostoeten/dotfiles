#!/usr/bin/env bash

source "${HOME}/.config/dotfiles/core/_env"
source "${HOME}/.config/dotfiles/core/_colors"
source "${HOME}/.config/dotfiles/core/_safety"

# Configuration
ENV_SYNC_DIR="${HOME}/.env-vault"
SYNC_URL_FILE="${ENV_SYNC_DIR}/sync_url"
GIST_DISCOVERY_FILE="${ENV_SYNC_DIR}/discovered_gists"

function secrets_bootstrap_help() {
    echo.header "Dotfiles Secrets Bootstrap"
    echo
    echo.info "Usage: dotfiles-secrets-bootstrap [command]"
    echo
    echo.info "Commands:"
    echo.cyan "  discover" | tr '\n' ' '
    echo "       - Auto-discover existing secrets gists"
    echo.cyan "  setup" | tr '\n' ' '
    echo "       - Interactive setup of secrets sync"
    echo.cyan "  status" | tr '\n' ' '
    echo "       - Show current bootstrap status"
    echo.cyan "  help" | tr '\n' ' '
    echo "       - Show this help"
    echo
    echo.info "This command is designed for new machine setup."
    echo.info "It will automatically find and configure your secrets sync."
}

function check_prerequisites() {
    echo.info "Checking prerequisites..."
    
    # Check if gh CLI is available
    if ! command -v gh &>/dev/null; then
        echo.error "GitHub CLI (gh) not found"
        echo.info "Install with: sudo apt install gh  # or your package manager"
        return 1
    fi
    
    # Check if authenticated
    if ! gh auth status &>/dev/null; then
        echo.error "GitHub CLI not authenticated"
        echo.info "Run: gh auth login --scopes gist"
        return 1
    fi
    
    # Check if jq is available
    if ! command -v jq &>/dev/null; then
        echo.error "jq not found - required for JSON processing"
        return 1
    fi
    
    echo.success "All prerequisites met"
    return 0
}

function discover_secrets_gists() {
    echo.header "🔍 Discovering Secrets Gists"
    
    if ! check_prerequisites; then
        return 1
    fi
    
    echo.info "Searching for existing secrets gists..."
    
    # Create discovery directory
    mkdir -p "$ENV_SYNC_DIR"
    
    # Search for gists with dotfiles-related content (compatible approach)
    local gists_raw=$(mktemp)
    gh gist list --limit 50 > "$gists_raw"
    
    # Parse the output to find relevant gists
    local secrets_gists=$(mktemp)
    echo "[]" > "$secrets_gists"
    
    while IFS='\t' read -r id description visibility updated files; do
        # Skip header line
        [[ "$id" == "ID" ]] && continue
        
        # Check if description or files contain relevant keywords
        if [[ "$description" =~ (dotfiles|secrets|env|vault) ]] || [[ "$files" =~ (env\.vault|secrets|dotfiles) ]]; then
            echo.info "Found potential secrets gist: $id - $description"
            
            # Create a simple JSON object for this gist
            local gist_json=$(jq -n --arg id "$id" --arg desc "$description" --arg updated "$updated" \
                '{id: $id, description: $desc, updated: $updated}')
            
            # Add to array
            jq --argjson gist "$gist_json" '. += [$gist]' "$secrets_gists" > "${secrets_gists}.tmp" && \
                mv "${secrets_gists}.tmp" "$secrets_gists"
        fi
    done < "$gists_raw"
    
    local gist_count=$(jq 'length' "$secrets_gists")
    
    if [[ "$gist_count" == "0" ]]; then
        echo.warning "No secrets gists found"
        rm -f "$gists_raw" "$secrets_gists"
        return 0
    fi
    
    # Save discovered gists
    cp "$secrets_gists" "$GIST_DISCOVERY_FILE"
    
    echo.success "Found $gist_count potential secrets gist(s):"
    jq -r '.[] | "  • \(.id): \(.description // "No description") (updated: \(.updated))"' "$secrets_gists" 2>/dev/null
    
    rm -f "$gists_raw" "$secrets_gists"
    echo.info "Discovery results saved to: $GIST_DISCOVERY_FILE"
}

function select_secrets_gist() {
    if [[ ! -f "$GIST_DISCOVERY_FILE" ]]; then
        echo.warning "No discovered gists found. Run discovery first."
        discover_secrets_gists
        [[ ! -f "$GIST_DISCOVERY_FILE" ]] && return 1
    fi
    
    local gist_count=$(jq -s 'length' "$GIST_DISCOVERY_FILE" 2>/dev/null || echo "0")
    
    if [[ "$gist_count" == "0" ]]; then
        echo.warning "No secrets gists available for selection"
        return 1
    fi
    
    echo.info "Available secrets gists:"
    
    # Display gists with numbers
    jq -s 'to_entries[] | "\(.key + 1). \(.value.id): \(.value.description // "No description")"' "$GIST_DISCOVERY_FILE" 2>/dev/null
    
    echo
    read -p "Select gist number (1-${gist_count}) or 0 to create new: " -r gist_choice
    
    if [[ "$gist_choice" == "0" ]]; then
        echo.info "Creating new secrets gist..."
        return 2  # Signal to create new
    fi
    
    if [[ ! "$gist_choice" =~ ^[0-9]+$ ]] || [[ "$gist_choice" -lt 1 ]] || [[ "$gist_choice" -gt "$gist_count" ]]; then
        echo.error "Invalid selection: $gist_choice"
        return 1
    fi
    
    # Get selected gist ID
    local selected_gist_id=$(jq -s --argjson idx "$((gist_choice - 1))" '.[$idx].id' "$GIST_DISCOVERY_FILE" 2>/dev/null | tr -d '"')
    
    if [[ -z "$selected_gist_id" || "$selected_gist_id" == "null" ]]; then
        echo.error "Failed to get gist ID"
        return 1
    fi
    
    echo.success "Selected gist: $selected_gist_id"
    
    # Configure sync URL
    local github_user=$(gh api user --jq .login)
    echo "https://gist.githubusercontent.com/${github_user}/${selected_gist_id}/raw/env.vault" > "$SYNC_URL_FILE"
    
    return 0
}

function setup_secrets_sync() {
    echo.header "🔐 Setting up Secrets Sync"
    
    if ! check_prerequisites; then
        return 1
    fi
    
    # Check if already configured
    if [[ -f "$SYNC_URL_FILE" ]]; then
        echo.warning "Secrets sync already configured"
        echo.info "Current sync URL: $(cat "$SYNC_URL_FILE")"
        read -p "Reconfigure? [y/N] " -n 1 -r
        echo
        [[ ! $REPLY =~ ^[Yy]$ ]] && return 0
    fi
    
    # Discover gists
    discover_secrets_gists
    
    # Select or create gist
    if ! select_secrets_gist; then
        local exit_code=$?
        if [[ $exit_code == 2 ]]; then
            # Create new gist
            echo.info "Initializing new secrets sync..."
            "$DOTFILES_BIN/dotfiles-env-sync" init
            return $?
        else
            return $exit_code
        fi
    fi
    
    echo.success "Secrets sync configured!"
    
    # Try to pull existing secrets
    echo.info "Attempting to sync existing secrets..."
    read -p "Pull and decrypt secrets now? [Y/n] " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Nn]$ ]]; then
        if "$DOTFILES_BIN/dotfiles-env-sync" pull; then
            echo.success "Secrets successfully synced!"
            echo.info "Available secrets:"
            "$DOTFILES_BIN/dotfiles-env" list
        else
            echo.warning "Failed to sync secrets - you can try again later with:"
            echo.info "dotfiles sync pull"
        fi
    fi
}

function bootstrap_status() {
    echo.header "🔍 Bootstrap Status"
    
    echo.info "Prerequisites:"
    command -v gh &>/dev/null && echo.success "  ✓ GitHub CLI installed" || echo.error "  ✗ GitHub CLI missing"
    gh auth status &>/dev/null && echo.success "  ✓ GitHub authenticated" || echo.warning "  ✗ GitHub not authenticated"
    command -v jq &>/dev/null && echo.success "  ✓ jq installed" || echo.error "  ✗ jq missing"
    
    echo
    echo.info "Configuration:"
    if [[ -f "$SYNC_URL_FILE" ]]; then
        echo.success "  ✓ Sync URL configured"
        echo.info "    URL: $(cat "$SYNC_URL_FILE")"
    else
        echo.warning "  ✗ Sync URL not configured"
    fi
    
    if [[ -f "$GIST_DISCOVERY_FILE" ]]; then
        local gist_count=$(jq -s 'length' "$GIST_DISCOVERY_FILE" 2>/dev/null || echo "0")
        echo.success "  ✓ $gist_count discovered gists cached"
    else
        echo.info "  • No discovery cache"
    fi
    
    echo
    echo.info "Environment Database:"
    if [[ -f "$DOTFILES_ENV_DB" ]]; then
        local env_count=$(jq 'length' "$DOTFILES_ENV_DB" 2>/dev/null || echo "0")
        echo.success "  ✓ $env_count environment variables stored"
        if [[ "$env_count" -gt 0 ]]; then
            echo.info "    Last modified: $(stat -c %y "$DOTFILES_ENV_DB" 2>/dev/null || echo 'Unknown')"
        fi
    else
        echo.warning "  ✗ No environment database found"
    fi
}

function main() {
    local command="${1:-help}"
    
    case "$command" in
        "discover")
            discover_secrets_gists
            ;;
        "setup")
            setup_secrets_sync
            ;;
        "status")
            bootstrap_status
            ;;
        "help"|"--help"|"-h"|"")
            secrets_bootstrap_help
            ;;
        *)
            echo.error "Unknown command: $command"
            secrets_bootstrap_help
            exit 1
            ;;
    esac
}

main "$@"
