#!/usr/bin/env bash

source "${HOME}/.config/dotfiles/core/_env"
source "${HOME}/.config/dotfiles/core/_colors"
source "${HOME}/.config/dotfiles/core/_safety"

function new_module() {
    local name="$1"
    local description="${2:-TODO: Add description}"
    
    if [[ -z "$name" ]]; then
        echo -n "Module name: "
        read -r name
        echo -n "Module description: "
        read -r description
        description="${description:-TODO: Add description}"
    fi
    
    name="${name%.sh}"
    local file="$DOTFILES_MODULES/${name}"
    
    if [[ -f "$file" ]]; then
        echo.error "Module already exists: $file"
        return 1
    fi
    
    cat > "$file" << 'EOF'
#!/usr/bin/env bash

# Module: MODULE_NAME
# Description: MODULE_DESCRIPTION
# Author: MODULE_AUTHOR
# Date: MODULE_DATE

function MODULE_NAME_init() {
    echo.debug "Initializing MODULE_NAME"
}

function MODULE_NAME_help() { # üé® Enhanced help menu
    echo.header "üì¶ MODULE_NAME Help"
    echo
    echo.cyan "Usage: MODULE_NAME <command> [options]"
    echo
    echo.purple "‚ö° Available commands:"
    echo "  $(echo.cyan 'MODULE_NAME <command>')    Main command"
    echo "  $(echo.cyan 'help')                     Show this help"
    echo
    echo.purple "‚ú® Examples:"
    echo.success "  ‚úì MODULE_NAME help    # Show help"
    echo
    echo.info "üí° This module is part of the dotfiles system"
}

alias MODULE_SHORT='MODULE_NAME'

MODULE_NAME_init
EOF
    
    sed -i "s/MODULE_NAME/$name/g" "$file"
    sed -i "s/MODULE_SHORT/${name:0:2}/g" "$file"
    sed -i "s/MODULE_DESCRIPTION/$description/g" "$file"
    sed -i "s/MODULE_AUTHOR/$(whoami)/g" "$file"
    sed -i "s/MODULE_DATE/$(date +%Y-%m-%d)/g" "$file"
    
    chmod +x "$file"
    
    # Register in configuration if available
    if command -v dotfiles-modules >/dev/null 2>&1; then
        dotfiles-modules add "$name" modules "$description"
    fi
    
    echo.success "Created module: $file"
    echo.info "Edit the module and customize as needed"
}

function new_plugin() {
    local name="$1"
    local description="${2:-TODO: Add description}"
    
    if [[ -z "$name" ]]; then
        echo -n "Plugin name: "
        read -r name
        echo -n "Plugin description: "
        read -r description
        description="${description:-TODO: Add description}"
    fi
    
    name="${name%.sh}"
    local file="$DOTFILES_MODULES/plugins/${name}"
    
    if [[ -f "$file" ]]; then
        echo.error "Plugin already exists: $file"
        return 1
    fi
    
    cat > "$file" << 'EOF'
#!/usr/bin/env bash

# Plugin: PLUGIN_NAME
# Description: PLUGIN_DESCRIPTION
# Dependencies: PLUGIN_DEPS
# Date: PLUGIN_DATE

function install_PLUGIN_NAME() {
    echo.info "Installing PLUGIN_NAME..."
    
    # Installation logic here
    # Example:
    # git clone https://github.com/user/plugin ~/.local/share/PLUGIN_NAME
    
    echo.success "Installed PLUGIN_NAME"
}

function configure_PLUGIN_NAME() {
    echo.debug "Configuring PLUGIN_NAME..."
    
    # Configuration logic here
    
    echo.debug "Configured PLUGIN_NAME"
}

function load_PLUGIN_NAME() {
    # Load plugin if installed
    if [[ -d "$HOME/.local/share/PLUGIN_NAME" ]]; then
        # source "$HOME/.local/share/PLUGIN_NAME/init.sh"
        echo.debug "Loaded PLUGIN_NAME"
    else
        echo.debug "PLUGIN_NAME not installed"
    fi
}

if [[ ! -d "$HOME/.local/share/PLUGIN_NAME" ]]; then
    echo.warning "PLUGIN_NAME not installed. Run: install_PLUGIN_NAME"
else
    load_PLUGIN_NAME
fi
EOF
    
    sed -i "s/PLUGIN_NAME/$name/g" "$file"
    sed -i "s/PLUGIN_DESCRIPTION/$description/g" "$file"
    sed -i "s/PLUGIN_DEPS/none/g" "$file"
    sed -i "s/PLUGIN_DATE/$(date +%Y-%m-%d)/g" "$file"
    
    chmod +x "$file"
    
    # Register in configuration if available
    if command -v dotfiles-modules >/dev/null 2>&1; then
        dotfiles-modules add "$name" plugins "$description"
    fi
    
    echo.success "Created plugin: $file"
}

function new_script() {
    local name="$1"
    
    if [[ -z "$name" ]]; then
        echo -n "Script name: "
        read -r name
    fi
    
    name="${name%.sh}"
    local file="$DOTFILES_MODULES/scripts/${name}"
    
    if [[ -f "$file" ]]; then
        echo.error "Script already exists: $file"
        return 1
    fi
    
    cat > "$file" << 'EOF'
#!/usr/bin/env bash

# Script: SCRIPT_NAME
# Description: SCRIPT_DESCRIPTION
# Usage: SCRIPT_NAME [options] <args>
# Date: SCRIPT_DATE

set -euo pipefail

source "${HOME}/.config/dotfiles/core/_env"
source "${HOME}/.config/dotfiles/core/_colors"
source "${HOME}/.config/dotfiles/core/_safety"

function usage() { # üé® Enhanced help menu
    echo.header "üõ†Ô∏è SCRIPT_NAME"
    echo
    echo.cyan "Usage: SCRIPT_NAME [options] <args>"
    echo
    echo.purple "üîß Options:"
    echo "  $(echo.cyan '-h, --help')     Show this help"
    echo "  $(echo.cyan '-v, --verbose')  Verbose output"
    echo "  $(echo.cyan '-d, --debug')    Debug mode"
    echo
    echo.purple "‚ú® Examples:"
    echo.success "  ‚úì SCRIPT_NAME example    # Basic usage"
    echo.success "  ‚úì SCRIPT_NAME --verbose # Verbose mode"
    echo
    echo.info "üí° This script uses the dotfiles framework for enhanced functionality"
}

function main() {
    local verbose=0
    local debug=0
    
    while [[ $# -gt 0 ]]; do
        case "$1" in
            -h|--help)
                usage
                exit 0
                ;;
            -v|--verbose)
                verbose=1
                shift
                ;;
            -d|--debug)
                debug=1
                DOTFILES_DEBUG=1
                shift
                ;;
            --)
                shift
                break
                ;;
            -*)
                echo.error "Unknown option: $1"
                usage
                exit 1
                ;;
            *)
                break
                ;;
        esac
    done
    
    # Main logic here
    echo.info "Running SCRIPT_NAME..."
    
    echo.success "Completed"
}

main "$@"
EOF
    
    sed -i "s/SCRIPT_NAME/$name/g" "$file"
    sed -i "s/SCRIPT_DESCRIPTION/TODO: Add description/g" "$file"
    sed -i "s/SCRIPT_DATE/$(date +%Y-%m-%d)/g" "$file"
    
    chmod +x "$file"
    ln -sf "$file" "$DOTFILES_BIN/$name"
    echo.success "Created script: $file"
    echo.success "Linked to: $DOTFILES_BIN/$name"
}

function new_alias() {
    local name="$1"
    local description="${2:-TODO: Add description}"
    
    if [[ -z "$name" ]]; then
        echo -n "Alias file name: "
        read -r name
        echo -n "Alias description: "
        read -r description
        description="${description:-TODO: Add description}"
    fi
    
    name="${name%.sh}"
    local file="$DOTFILES_MODULES/aliases/${name}"
    
    if [[ -f "$file" ]]; then
        echo.error "Alias file already exists: $file"
        return 1
    fi
    
    cat > "$file" << 'EOF'
#!/usr/bin/env bash

# Aliases: ALIAS_NAME
# Description: ALIAS_DESCRIPTION
# Date: ALIAS_DATE

# Navigation
alias ALIAS_PREFIX.='cd .'

# Commands
alias ALIAS_PREFIX='echo "ALIAS_NAME aliases loaded"'

# Functions
function ALIAS_PREFIX_example() {
    echo.info "Example function for ALIAS_NAME"
}
EOF
    
    sed -i "s/ALIAS_NAME/$name/g" "$file"
    sed -i "s/ALIAS_PREFIX/${name:0:2}/g" "$file"
    sed -i "s/ALIAS_DESCRIPTION/$description/g" "$file"
    sed -i "s/ALIAS_DATE/$(date +%Y-%m-%d)/g" "$file"
    
    chmod +x "$file"
    
    # Add .aliases extension
    local alias_file="${file}.aliases"
    mv "$file" "$alias_file"
    
    # Register in configuration if available
    if command -v dotfiles-modules >/dev/null 2>&1; then
        dotfiles-modules add "$name" aliases "$description"
    fi
    
    echo.success "Created alias file: $alias_file"
}

function new_help() { # üé® Enhanced help menu
    echo.header "üõ†Ô∏è Dotfiles Module Creator"
    echo
    echo.cyan "Usage: dotfiles-new <type> [name] [description]"
    echo
    echo.purple "‚ö° Types:"
    echo "  $(echo.cyan 'module')    Create a new module"
    echo "  $(echo.cyan 'plugin')    Create a new plugin wrapper"
    echo "  $(echo.cyan 'script')    Create a new script"
    echo "  $(echo.cyan 'alias')     Create a new alias file"
    echo "  $(echo.cyan 'help')      Show this help"
    echo
    echo.purple "‚ú® Examples:"
    echo.success "  ‚úì dotfiles-new module git-extras 'Extra Git utilities'   # Create module"
    echo.success "  ‚úì dotfiles-new plugin fzf 'Fuzzy finder integration'    # Create plugin"
    echo.success "  ‚úì dotfiles-new script backup 'Automated backup script'  # Create script"
    echo.success "  ‚úì dotfiles-new alias docker 'Docker shortcuts'          # Create aliases"
    echo
    echo.info "üí° All new components use modern templates with best practices"
}

case "${1:-help}" in
    module|mod|m)
        new_module "$2" "$3"
        ;;
    plugin|plug|p)
        new_plugin "$2" "$3"
        ;;
    script|scr|s)
        new_script "$2"
        ;;
    alias|ali|a)
        new_alias "$2" "$3"
        ;;
    help|--help|-h)
        new_help
        ;;
    *)
        echo.error "Unknown type: $1"
        new_help
        exit 1
        ;;
esac
