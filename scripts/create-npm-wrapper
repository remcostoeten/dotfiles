#!/usr/bin/env bash
set -e

# Ask for package info
echo "🆕 Create a global npm wrapper"

read -rp "Package name (npm): " PACKAGE
if [ -z "$PACKAGE" ]; then
  echo "❌ Package name is required."
  exit 1
fi

read -rp "Command name (shortcut, leave empty to use package name): " CMD
CMD="${CMD:-$PACKAGE}"

# Paths
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
DOTFILES_DIR="$(cd "$SCRIPT_DIR/.." && pwd)"
SCRIPTS_DIR="$DOTFILES_DIR/scripts"
BIN_DIR="$DOTFILES_DIR/bin"

mkdir -p "$SCRIPTS_DIR" "$BIN_DIR"

SCRIPT_FILE="$SCRIPTS_DIR/$CMD"
BIN_FILE="$BIN_DIR/$CMD"

# Create script
cat >"$SCRIPT_FILE" <<'EOF'
#!/usr/bin/env bash
set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "$SCRIPT_DIR/ensure-global-npm-package" "PACKAGE_PLACEHOLDER" "CMD_PLACEHOLDER"

# Run the actual command (not our wrapper)
"$ACTUAL_CMD_PATH" "$@"
EOF

# Replace placeholders (use | as delimiter to handle / in scoped package names)
sed -i "s|PACKAGE_PLACEHOLDER|$PACKAGE|g" "$SCRIPT_FILE"
sed -i "s|CMD_PLACEHOLDER|$CMD|g" "$SCRIPT_FILE"

chmod +x "$SCRIPT_FILE"

# Create bin wrapper
cat >"$BIN_FILE" <<EOF
#!/usr/bin/env bash
set -e

DOTFILES_DIR="\$(cd "\$(dirname "\${BASH_SOURCE[0]}")/.." && pwd)"
"\$DOTFILES_DIR/scripts/$CMD" "\$@"
EOF

chmod +x "$BIN_FILE"

echo "✅ Created wrapper for '$PACKAGE' as '$CMD'"
echo "Use it with: $CMD"
