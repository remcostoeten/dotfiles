#!/usr/bin/env python3

import os
import re
import shutil
import argparse
from pathlib import Path
from typing import List, Dict, Set, Tuple
import sys

class Colors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKCYAN = '\033[96m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

def print_intro():
    print(f"\n{Colors.HEADER}{Colors.BOLD}╔══════════════════════════════════════════════╗{Colors.ENDC}")
    print(f"{Colors.HEADER}{Colors.BOLD}║           UI COMPONENTS MIGRATOR             ║{Colors.ENDC}")
    print(f"{Colors.HEADER}{Colors.BOLD}║        Move & Update Import Paths           ║{Colors.ENDC}")
    print(f"{Colors.HEADER}{Colors.BOLD}╚══════════════════════════════════════════════╝{Colors.ENDC}\n")

def print_help():
    help_text = f"""
{Colors.OKCYAN}Available Arguments:{Colors.ENDC}
  --dry-run, -d         Show what would be done without making changes
  --kebab, -k          Convert all filenames to kebab-case
  --barrel, -b         Create index.ts barrel export file for the target directory
  --barrel-shared, -bs Create index.ts barrel export file for src/shared/components/ui
  --source-path        Custom source path (default: src/components/ui)
  --target-path        Custom target path (default: src/shared/components/ui)
  --cleanup            Remove the source directory after moving files
  --help, -h           Show this help message

{Colors.OKGREEN}Examples:{Colors.ENDC}
  python migrate_ui.py --dry-run
  python migrate_ui.py --kebab --barrel --cleanup
  python migrate_ui.py --source-path "components/ui" --target-path "shared/ui"
"""
    print(help_text)

def to_kebab_case(filename: str) -> str:
    s1 = re.sub('(.)([A-Z][a-z]+)', r'\1-\2', filename)
    return re.sub('([a-z0-9])([A-Z])', r'\1-\2', s1).lower()

def find_all_files(directory: str, extensions: Set[str]) -> List[Path]:
    files = []
    for root, _, filenames in os.walk(directory):
        for filename in filenames:
            if any(filename.endswith(ext) for ext in extensions):
                files.append(Path(root) / filename)
    return files

def extract_imports(file_path: Path) -> List[Tuple[str, int]]:
    imports = []
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            lines = f.readlines()
            
        for line_num, line in enumerate(lines, 1):
            line = line.strip()
            if line.startswith('import ') and ('components/ui' in line or '/ui' in line):
                imports.append((line, line_num))
    except Exception as e:
        print(f"{Colors.FAIL}Error reading {file_path}: {e}{Colors.ENDC}")
    
    return imports

def update_import_line(import_line: str, old_path: str, new_path: str, kebab_case: bool = False) -> str:
    patterns = [
        r'from ["\']@/components/ui([^"\\]*)["\\]',
        r'from ["\']\.\.?/?\.\.?/?\.\.?/?\.\.?/?components/ui([^"\\]*)["\\]',
        r'from ["\']\.\.?/?\.\.?/?\.\.?/?ui([^"\\]*)["\\]',
        r'from ["\']\.\.?/?\.\.?/?ui([^"\\]*)["\\]',
        r'from ["\']\.\.?/?ui([^"\\]*)["\\]',
        r'from ["\']\./?ui([^"\\]*)["\\]',
    ]
    
    updated_line = import_line
    
    for pattern in patterns:
        match = re.search(pattern, import_line)
        if match:
            suffix = match.group(1)
            
            if kebab_case and suffix:
                parts = suffix.strip('/').split('/')
                if parts and parts[-1]:
                    parts[-1] = to_kebab_case(parts[-1])
                    suffix = '/' + '/'.join(parts) if parts[0] else ''
            
            new_import_path = f"@/{new_path.replace('src/', '')}{suffix}"
            updated_line = re.sub(pattern, f'from "{new_import_path}"', import_line)
            break
    
    return updated_line

def move_files(source_dir: str, target_dir: str, kebab_case: bool = False, dry_run: bool = False) -> Dict[str, str]:
    moved_files = {}
    
    if not os.path.exists(source_dir):
        print(f"{Colors.FAIL}Source directory {source_dir} not found{Colors.ENDC}")
        return moved_files
    
    if not dry_run:
        os.makedirs(target_dir, exist_ok=True)
    
    for item in os.listdir(source_dir):
        source_path = os.path.join(source_dir, item)
        
        target_name = to_kebab_case(item) if kebab_case else item
        target_path = os.path.join(target_dir, target_name)
        
        if dry_run:
            print(f"{Colors.OKCYAN}Would move: {source_path} -> {target_path}{Colors.ENDC}")
        else:
            try:
                shutil.move(source_path, target_path)
                print(f"{Colors.OKGREEN}Moved: {source_path} -> {target_path}{Colors.ENDC}")
            except Exception as e:
                print(f"{Colors.FAIL}Error moving {source_path}: {e}{Colors.ENDC}")
                continue
        
        moved_files[item] = target_name
    
    return moved_files

def cleanup_directory(directory: str, dry_run: bool = False):
    if not os.path.exists(directory):
        print(f"{Colors.WARNING}Directory not found, skipping cleanup: {directory}{Colors.ENDC}")
        return

    if dry_run:
        print(f"{Colors.OKCYAN}Would remove directory: {directory}{Colors.ENDC}")
    else:
        try:
            shutil.rmtree(directory)
            print(f"{Colors.OKGREEN}Removed directory: {directory}{Colors.ENDC}")
        except Exception as e:
            print(f"{Colors.FAIL}Error removing directory {directory}: {e}{Colors.ENDC}")

def create_barrel_file(target_dir: str, dry_run: bool = False, barrel_for_shared: bool = False):
    if barrel_for_shared:
        target_dir = 'src/shared/components/ui'

    if dry_run:
        print(f"{Colors.OKCYAN}Would create barrel file: {target_dir}/index.ts{Colors.ENDC}")
        return
    
    index_path = os.path.join(target_dir, 'index.ts')
    exports = []
    
    for item in sorted(os.listdir(target_dir)):
        if item.endswith(('.ts', '.tsx')) and item != 'index.ts':
            filename_without_ext = os.path.splitext(item)[0]
            exports.append(f"export * from './{filename_without_ext}'")
    
    try:
        with open(index_path, 'w', encoding='utf-8') as f:
            f.write('\n'.join(exports) + '\n')
        print(f"{Colors.OKGREEN}Created barrel file: {index_path}{Colors.ENDC}")
    except Exception as e:
        print(f"{Colors.FAIL}Error creating barrel file: {e}{Colors.ENDC}")

def update_imports_in_files(project_files: List[Path], old_path: str, new_path: str, kebab_case: bool = False, dry_run: bool = False):
    total_files = len(project_files)
    total_imports = 0
    updated_files = 0
    
    print(f"\n{Colors.OKBLUE}Scanning {total_files} files for import updates...{Colors.ENDC}")
    
    for i, file_path in enumerate(project_files):
        imports = extract_imports(file_path)
        if not imports:
            continue
        
        print(f"{Colors.OKCYAN}[{i+1}/{total_files}] {file_path}: {len(imports)} imports found{Colors.ENDC}")
        
        if dry_run:
            for import_line, line_num in imports:
                updated_line = update_import_line(import_line, old_path, new_path, kebab_case)
                if updated_line != import_line:
                    print(f"  {Colors.WARNING}Line {line_num}: {import_line.strip()}{Colors.ENDC}")
                    print(f"  {Colors.OKGREEN}Would become: {updated_line.strip()}{Colors.ENDC}")
            total_imports += len(imports)
            continue
        
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            updated_content = content
            file_changed = False
            
            for import_line, line_num in imports:
                updated_line = update_import_line(import_line, old_path, new_path, kebab_case)
                if updated_line != import_line:
                    updated_content = updated_content.replace(import_line, updated_line)
                    file_changed = True
                    print(f"  {Colors.WARNING}Line {line_num}: {import_line.strip()}{Colors.ENDC}")
                    print(f"  {Colors.OKGREEN}Updated to: {updated_line.strip()}{Colors.ENDC}")
            
            if file_changed:
                with open(file_path, 'w', encoding='utf-8') as f:
                    f.write(updated_content)
                updated_files += 1
            
            total_imports += len(imports)
            
        except Exception as e:
            print(f"{Colors.FAIL}Error updating {file_path}: {e}{Colors.ENDC}")
    
    print(f"\n{Colors.OKGREEN}Summary: {total_imports} imports found in {total_files} files{Colors.ENDC}")
    if not dry_run:
        print(f"{Colors.OKGREEN}{updated_files} files updated{Colors.ENDC}")

def run_interactive_mode():
    print_intro()
    print(f"{Colors.OKCYAN}Entering interactive mode...{Colors.ENDC}\n")

    source_path = input(f"{Colors.BOLD}Enter source path (default: src/components/ui): {Colors.ENDC}") or 'src/components/ui'
    target_path = input(f"{Colors.BOLD}Enter target path (default: src/shared/components/ui): {Colors.ENDC}") or 'src/shared/components/ui'
    kebab = input(f"{Colors.BOLD}Convert filenames to kebab-case? (y/n): {Colors.ENDC}").lower() == 'y'
    barrel = input(f"{Colors.BOLD}Create index.ts barrel file for the target directory? (y/n): {Colors.ENDC}").lower() == 'y'
    barrel_shared = input(f"{Colors.BOLD}Create index.ts barrel file for src/shared/components/ui? (y/n): {Colors.ENDC}").lower() == 'y'
    cleanup = input(f"{Colors.BOLD}Remove the source directory after moving files? (y/n): {Colors.ENDC}").lower() == 'y'
    dry_run = input(f"{Colors.BOLD}Run in dry-run mode? (y/n): {Colors.ENDC}").lower() == 'y'

    print(f"\n{Colors.OKBLUE}Source: {source_path}{Colors.ENDC}")
    print(f"{Colors.OKBLUE}Target: {target_path}{Colors.ENDC}")
    print(f"{Colors.OKBLUE}Kebab-case: {kebab}{Colors.ENDC}")
    print(f"{Colors.OKBLUE}Create barrel: {barrel}{Colors.ENDC}")
    print(f"{Colors.OKBLUE}Create barrel for shared: {barrel_shared}{Colors.ENDC}")
    print(f"{Colors.OKBLUE}Cleanup source: {cleanup}{Colors.ENDC}")
    print(f"{Colors.OKBLUE}Dry run: {dry_run}{Colors.ENDC}\n")

    confirm = input(f"{Colors.BOLD}Proceed with these settings? (y/n): {Colors.ENDC}").lower()
    if confirm != 'y':
        print(f"{Colors.WARNING}Migration cancelled.{Colors.ENDC}")
        return

    project_files = find_all_files('.', {'.ts', '.tsx', '.js', '.jsx'})
    excluded_files = [f for f in project_files if 'node_modules' not in str(f)]
    
    print(f"{Colors.HEADER}Step 1: Moving files{Colors.ENDC}")
    moved_files = move_files(source_path, target_path, kebab, dry_run)
    
    if moved_files:
        print(f"{Colors.OKGREEN}Moved {len(moved_files)} files{Colors.ENDC}")
    else:
        print(f"{Colors.WARNING}No files were moved{Colors.ENDC}")
    
    print(f"\n{Colors.HEADER}Step 2: Updating imports{Colors.ENDC}")
    update_imports_in_files(excluded_files, source_path, target_path, kebab, dry_run)
    
    if barrel and moved_files:
        print(f"\n{Colors.HEADER}Step 3: Creating barrel file{Colors.ENDC}")
        create_barrel_file(target_path, dry_run)

    if barrel_shared:
        print(f"\n{Colors.HEADER}Step 4: Creating barrel file for shared directory{Colors.ENDC}")
        create_barrel_file(target_path, dry_run, barrel_for_shared=True)

    if cleanup and moved_files:
        print(f"\n{Colors.HEADER}Step 5: Cleaning up source directory{Colors.ENDC}")
        cleanup_directory(source_path, dry_run)

    print(f"\n{Colors.OKGREEN}{Colors.BOLD}Migration completed successfully!{Colors.ENDC}")

def main():
    parser = argparse.ArgumentParser(description='Migrate UI components and update imports', add_help=False)
    parser.add_argument('--dry-run', '-d', action='store_true', help='Show what would be done without making changes')
    parser.add_argument('--kebab', '-k', action='store_true', help='Convert filenames to kebab-case')
    parser.add_argument('--barrel', '-b', action='store_true', help='Create index.ts barrel file for the target directory')
    parser.add_argument('--barrel-shared', '-bs', action='store_true', help='Create index.ts barrel file for src/shared/components/ui')
    parser.add_argument('--source-path', default='src/components/ui', help='Source path (default: src/components/ui)')
    parser.add_argument('--target-path', default='src/shared/components/ui', help='Target path (default: src/shared/components/ui)')
    parser.add_argument('--cleanup', action='store_true', help='Remove the source directory after moving files')
    parser.add_argument('--help', '-h', action='store_true', help='Show help message')
    
    if len(sys.argv) == 1:
        run_interactive_mode()
        return

    args = parser.parse_args()
    
    if args.help:
        print_intro()
        print_help()
        return
    
    print_intro()
    
    if args.dry_run:
        print(f"{Colors.WARNING}DRY RUN MODE - No changes will be made{Colors.ENDC}\n")
    
    source_path = args.source_path
    target_path = args.target_path
    
    print(f"{Colors.OKBLUE}Source: {source_path}{Colors.ENDC}")
    print(f"{Colors.OKBLUE}Target: {target_path}{Colors.ENDC}")
    print(f"{Colors.OKBLUE}Kebab-case: {args.kebab}{Colors.ENDC}")
    print(f"{Colors.OKBLUE}Create barrel: {args.barrel}{Colors.ENDC}")
    print(f"{Colors.OKBLUE}Create barrel for shared: {args.barrel_shared}{Colors.ENDC}")
    print(f"{Colors.OKBLUE}Cleanup source: {args.cleanup}{Colors.ENDC}\n")

    project_files = find_all_files('.', {'.ts', '.tsx', '.js', '.jsx'})
    excluded_files = [f for f in project_files if 'node_modules' not in str(f)]
    
    print(f"{Colors.HEADER}Step 1: Moving files{Colors.ENDC}")
    moved_files = move_files(source_path, target_path, args.kebab, args.dry_run)
    
    if moved_files:
        print(f"{Colors.OKGREEN}Moved {len(moved_files)} files{Colors.ENDC}")
    else:
        print(f"{Colors.WARNING}No files were moved{Colors.ENDC}")
    
    print(f"\n{Colors.HEADER}Step 2: Updating imports{Colors.ENDC}")
    update_imports_in_files(excluded_files, source_path, target_path, args.kebab, args.dry_run)
    
    if args.barrel and moved_files:
        print(f"\n{Colors.HEADER}Step 3: Creating barrel file{Colors.ENDC}")
        create_barrel_file(target_path, args.dry_run)

    if args.barrel_shared:
        print(f"\n{Colors.HEADER}Step 4: Creating barrel file for shared directory{Colors.ENDC}")
        create_barrel_file(target_path, args.dry_run, barrel_for_shared=True)

    if args.cleanup and moved_files:
        print(f"\n{Colors.HEADER}Step 5: Cleaning up source directory{Colors.ENDC}")
        cleanup_directory(source_path, args.dry_run)

    print(f"\n{Colors.OKGREEN}{Colors.BOLD}Migration completed successfully!{Colors.ENDC}")

if __name__ == '__main__':
    main()