#!/usr/bin/env python3

import json
import os
import sys
import subprocess
from typing import Dict, List, Optional, Tuple

STORAGE_DIR = os.path.expanduser('~/.config/dotfiles/secrets')
SECRETS_FILE = os.path.join(STORAGE_DIR, 'secrets.json')

class Colors:
    RED = '\033[0;31m'
    GREEN = '\033[0;32m'
    YELLOW = '\033[1;33m'
    BLUE = '\033[0;34m'
    MAGENTA = '\033[0;35m'
    CYAN = '\033[0;36m'
    GRAY = '\033[0;90m'
    BOLD = '\033[1m'
    DIM = '\033[2m'
    NC = '\033[0m'

def clear_screen():
    os.system('clear')

def print_header(title: str):
    print(f"\n{Colors.CYAN}{Colors.BOLD}{'=' * 60}{Colors.NC}")
    print(f"{Colors.CYAN}{Colors.BOLD}  {title}{Colors.NC}")
    print(f"{Colors.CYAN}{Colors.BOLD}{'=' * 60}{Colors.NC}\n")

def ensure_storage_exists():
    os.makedirs(STORAGE_DIR, mode=0o700, exist_ok=True)
    if not os.path.exists(SECRETS_FILE):
        with open(SECRETS_FILE, 'w') as f:
            json.dump({'secrets': []}, f, indent=2)

def read_secrets() -> List[Dict]:
    try:
        with open(SECRETS_FILE, 'r') as f:
            data = json.load(f)
            return data.get('secrets', [])
    except Exception as e:
        print(f"{Colors.RED}Error reading secrets: {e}{Colors.NC}")
        return []

def write_secrets(secrets: List[Dict]) -> bool:
    try:
        backup_file = SECRETS_FILE + '.bak'
        if os.path.exists(SECRETS_FILE):
            with open(SECRETS_FILE, 'r') as f:
                content = f.read()
            with open(backup_file, 'w') as f:
                f.write(content)
        
        with open(SECRETS_FILE, 'w') as f:
            json.dump({'secrets': secrets}, f, indent=2)
        return True
    except Exception as e:
        print(f"{Colors.RED}Error writing secrets: {e}{Colors.NC}")
        return False

def copy_to_clipboard(text: str) -> bool:
    try:
        subprocess.run(['xclip', '-selection', 'clipboard'], 
                      input=text.encode(), 
                      check=True,
                      stdout=subprocess.DEVNULL,
                      stderr=subprocess.DEVNULL)
        return True
    except Exception:
        return False

def get_keypress():
    import termios
    import tty
    
    fd = sys.stdin.fileno()
    old_settings = termios.tcgetattr(fd)
    try:
        tty.setraw(fd)
        ch = sys.stdin.read(1)
        
        if ch == '\x1b':
            ch2 = sys.stdin.read(1)
            if ch2 == '[':
                ch3 = sys.stdin.read(1)
                if ch3 == 'A':
                    return 'up'
                elif ch3 == 'B':
                    return 'down'
                elif ch3 == 'C':
                    return 'right'
                elif ch3 == 'D':
                    return 'left'
            return 'esc'
        elif ch == '\r' or ch == '\n':
            return 'enter'
        elif ch == ' ':
            return 'space'
        elif ch == '\x03':
            return 'ctrl_c'
        return ch
    finally:
        termios.tcsetattr(fd, termios.TCSADRAIN, old_settings)

def display_menu_options(options: List[str], selected: int, title: str, selected_items: Optional[List[int]] = None):
    clear_screen()
    print_header(title)
    
    for i, option in enumerate(options):
        prefix = ""
        if selected_items is not None and i in selected_items:
            prefix = f"{Colors.GREEN}[✓] {Colors.NC}"
        elif selected_items is not None:
            prefix = f"{Colors.GRAY}[ ] {Colors.NC}"
        
        if i == selected:
            print(f"  {Colors.GREEN}{Colors.BOLD}→ {prefix}{option}{Colors.NC}")
        else:
            print(f"    {prefix}{option}")
    
    print(f"\n{Colors.GRAY}Use arrow keys to navigate", end='')
    if selected_items is not None:
        print(f", space to select", end='')
    print(f", Enter to confirm, Ctrl+C to cancel{Colors.NC}")

def interactive_menu(options: List[str], title: str, allow_multi: bool = False) -> Optional[int | List[int]]:
    if not options:
        print(f"{Colors.YELLOW}No options available{Colors.NC}")
        return None
    
    selected = 0
    selected_items = [] if allow_multi else None
    
    while True:
        display_menu_options(options, selected, title, selected_items)
        
        key = get_keypress()
        
        if key == 'up':
            selected = (selected - 1) % len(options)
        elif key == 'down':
            selected = (selected + 1) % len(options)
        elif key == 'space' and allow_multi:
            if selected in selected_items:
                selected_items.remove(selected)
            else:
                selected_items.append(selected)
        elif key == 'enter':
            if allow_multi:
                return selected_items if selected_items else None
            return selected
        elif key == 'ctrl_c' or key == 'esc':
            return None

def add_secret():
    clear_screen()
    print_header("Add New Secret")
    
    try:
        name = input(f"{Colors.GREEN}Name{Colors.NC} (required): ").strip()
        if not name:
            print(f"{Colors.RED}✗ Name is required{Colors.NC}")
            return
        
        prefix = input(f"{Colors.YELLOW}Environment variable prefix{Colors.NC} (optional, e.g., API_KEY): ").strip()
        
        value = input(f"{Colors.CYAN}Value{Colors.NC} (required): ").strip()
        if not value:
            print(f"{Colors.RED}✗ Value is required{Colors.NC}")
            return
        
        secrets = read_secrets()
        
        existing = next((s for s in secrets if s['name'] == name), None)
        if existing:
            confirm = input(f"{Colors.YELLOW}Secret '{name}' already exists. Overwrite? (y/N): {Colors.NC}").lower()
            if confirm != 'y':
                print(f"{Colors.GRAY}Cancelled{Colors.NC}")
                return
            secrets.remove(existing)
        
        secrets.append({
            'name': name,
            'prefix': prefix,
            'value': value
        })
        
        if write_secrets(secrets):
            print(f"\n{Colors.GREEN}✓ Secret '{name}' saved successfully{Colors.NC}")
        else:
            print(f"\n{Colors.RED}✗ Failed to save secret{Colors.NC}")
    
    except KeyboardInterrupt:
        print(f"\n{Colors.GRAY}Cancelled{Colors.NC}")
    except Exception as e:
        print(f"{Colors.RED}Error: {e}{Colors.NC}")

def view_secrets():
    secrets = read_secrets()
    
    if not secrets:
        clear_screen()
        print_header("View Secrets")
        print(f"{Colors.YELLOW}No secrets stored yet{Colors.NC}")
        print(f"\n{Colors.GRAY}Use 'secret --add' to add a secret{Colors.NC}\n")
        return
    
    options = []
    for secret in secrets:
        name = secret['name']
        prefix = secret.get('prefix', '')
        display = f"{name}"
        if prefix:
            display += f" ({Colors.CYAN}{prefix}{Colors.NC})"
        options.append(display)
    
    selected_idx = interactive_menu(options, "Select Secret to Copy")
    
    if selected_idx is None:
        return
    
    secret = secrets[selected_idx]
    
    clear_screen()
    print_header(f"Copy: {secret['name']}")
    print(f"{Colors.BOLD}Choose copy format:{Colors.NC}\n")
    print(f"  1) {Colors.CYAN}Environment variable{Colors.NC} ", end='')
    if secret.get('prefix'):
        print(f"({secret['prefix']}={secret['value']})")
    else:
        print(f"(value only, no prefix)")
    print(f"  2) {Colors.YELLOW}Value only{Colors.NC} ({secret['value']})")
    print(f"  3) {Colors.GRAY}Cancel{Colors.NC}")
    
    try:
        choice = input(f"\n{Colors.BOLD}Choice (1-3): {Colors.NC}").strip()
        
        if choice == '1':
            if secret.get('prefix'):
                text = f"{secret['prefix']}={secret['value']}"
            else:
                text = secret['value']
            if copy_to_clipboard(text):
                print(f"\n{Colors.GREEN}✓ Copied to clipboard: {Colors.NC}{text}")
            else:
                print(f"\n{Colors.RED}✗ Failed to copy to clipboard{Colors.NC}")
        elif choice == '2':
            if copy_to_clipboard(secret['value']):
                print(f"\n{Colors.GREEN}✓ Copied value to clipboard{Colors.NC}")
            else:
                print(f"\n{Colors.RED}✗ Failed to copy to clipboard{Colors.NC}")
        else:
            print(f"\n{Colors.GRAY}Cancelled{Colors.NC}")
    
    except KeyboardInterrupt:
        print(f"\n{Colors.GRAY}Cancelled{Colors.NC}")

def edit_secret():
    secrets = read_secrets()
    
    if not secrets:
        clear_screen()
        print_header("Edit Secret")
        print(f"{Colors.YELLOW}No secrets to edit{Colors.NC}\n")
        return
    
    options = [f"{s['name']}" + (f" ({Colors.CYAN}{s.get('prefix', '')}{Colors.NC})" if s.get('prefix') else "") 
               for s in secrets]
    
    selected_idx = interactive_menu(options, "Select Secret to Edit")
    
    if selected_idx is None:
        return
    
    secret = secrets[selected_idx]
    
    clear_screen()
    print_header(f"Edit: {secret['name']}")
    
    try:
        print(f"{Colors.GRAY}Press Enter to keep current value{Colors.NC}\n")
        
        new_name = input(f"{Colors.GREEN}Name{Colors.NC} [{secret['name']}]: ").strip()
        if not new_name:
            new_name = secret['name']
        
        new_prefix = input(f"{Colors.YELLOW}Prefix{Colors.NC} [{secret.get('prefix', '')}]: ").strip()
        if new_prefix == '' and 'prefix' in secret:
            new_prefix = secret['prefix']
        
        new_value = input(f"{Colors.CYAN}Value{Colors.NC} [***hidden***]: ").strip()
        if not new_value:
            new_value = secret['value']
        
        secrets[selected_idx] = {
            'name': new_name,
            'prefix': new_prefix,
            'value': new_value
        }
        
        if write_secrets(secrets):
            print(f"\n{Colors.GREEN}✓ Secret updated successfully{Colors.NC}")
        else:
            print(f"\n{Colors.RED}✗ Failed to update secret{Colors.NC}")
    
    except KeyboardInterrupt:
        print(f"\n{Colors.GRAY}Cancelled{Colors.NC}")

def delete_secrets():
    secrets = read_secrets()
    
    if not secrets:
        clear_screen()
        print_header("Delete Secrets")
        print(f"{Colors.YELLOW}No secrets to delete{Colors.NC}\n")
        return
    
    options = [f"{s['name']}" + (f" ({Colors.CYAN}{s.get('prefix', '')}{Colors.NC})" if s.get('prefix') else "") 
               for s in secrets]
    
    selected_indices = interactive_menu(options, "Select Secrets to Delete (Space to select, Enter to confirm)", allow_multi=True)
    
    if selected_indices is None or not selected_indices:
        clear_screen()
        print(f"{Colors.GRAY}No secrets selected{Colors.NC}\n")
        return
    
    clear_screen()
    print_header("Confirm Deletion")
    print(f"{Colors.YELLOW}You are about to delete:{Colors.NC}\n")
    for idx in sorted(selected_indices):
        print(f"  • {secrets[idx]['name']}")
    
    try:
        confirm = input(f"\n{Colors.RED}Are you sure? (yes/N): {Colors.NC}").lower()
        if confirm == 'yes':
            remaining_secrets = [s for i, s in enumerate(secrets) if i not in selected_indices]
            if write_secrets(remaining_secrets):
                print(f"\n{Colors.GREEN}✓ Deleted {len(selected_indices)} secret(s){Colors.NC}")
            else:
                print(f"\n{Colors.RED}✗ Failed to delete secrets{Colors.NC}")
        else:
            print(f"\n{Colors.GRAY}Cancelled{Colors.NC}")
    except KeyboardInterrupt:
        print(f"\n{Colors.GRAY}Cancelled{Colors.NC}")

def show_help():
    clear_screen()
    print_header("Secret Manager - Help")
    
    print(f"{Colors.BOLD}USAGE:{Colors.NC}")
    print(f"  {Colors.GREEN}secret{Colors.NC} [COMMAND]\n")
    
    print(f"{Colors.BOLD}COMMANDS:{Colors.NC}")
    print(f"  {Colors.CYAN}(no args){Colors.NC}           Show interactive menu")
    print(f"  {Colors.CYAN}--add, -a{Colors.NC}           Add a new secret")
    print(f"  {Colors.CYAN}--view, -v{Colors.NC}          View and copy secrets")
    print(f"  {Colors.CYAN}--edit, -e{Colors.NC}          Edit an existing secret")
    print(f"  {Colors.CYAN}--delete, -d{Colors.NC}        Delete secret(s)")
    print(f"  {Colors.CYAN}--help, -h{Colors.NC}          Show this help message\n")
    
    print(f"{Colors.BOLD}EXAMPLES:{Colors.NC}")
    print(f"  {Colors.GREEN}secret{Colors.NC}              # Interactive menu")
    print(f"  {Colors.GREEN}secret --add{Colors.NC}        # Add a new secret")
    print(f"  {Colors.GREEN}secret -v{Colors.NC}           # View secrets\n")
    
    print(f"{Colors.BOLD}SECRET STRUCTURE:{Colors.NC}")
    print(f"  • {Colors.CYAN}Name{Colors.NC}: Identifier for the secret")
    print(f"  • {Colors.YELLOW}Prefix{Colors.NC}: Environment variable name (optional)")
    print(f"  • {Colors.MAGENTA}Value{Colors.NC}: The actual secret value\n")
    
    print(f"{Colors.BOLD}STORAGE:{Colors.NC}")
    print(f"  {Colors.GRAY}Location: ~/.config/dotfiles/secrets/secrets.json{Colors.NC}")
    print(f"  {Colors.GRAY}Format: Plain JSON (not encrypted){Colors.NC}\n")

def show_interactive_menu():
    menu_options = [
        "Add new secret",
        "View secrets",
        "Edit secret",
        "Delete secret(s)",
        "Help",
        "Exit"
    ]
    
    while True:
        selected = interactive_menu(menu_options, "Secret Manager - Main Menu")
        
        if selected is None or selected == 5:
            clear_screen()
            print(f"{Colors.CYAN}Goodbye! 👋{Colors.NC}\n")
            break
        elif selected == 0:
            add_secret()
            input(f"\n{Colors.GRAY}Press Enter to continue...{Colors.NC}")
        elif selected == 1:
            view_secrets()
            input(f"\n{Colors.GRAY}Press Enter to continue...{Colors.NC}")
        elif selected == 2:
            edit_secret()
            input(f"\n{Colors.GRAY}Press Enter to continue...{Colors.NC}")
        elif selected == 3:
            delete_secrets()
            input(f"\n{Colors.GRAY}Press Enter to continue...{Colors.NC}")
        elif selected == 4:
            show_help()
            input(f"\n{Colors.GRAY}Press Enter to continue...{Colors.NC}")

def main():
    ensure_storage_exists()
    
    if len(sys.argv) == 1:
        show_interactive_menu()
    else:
        arg = sys.argv[1]
        
        if arg in ['--add', '-a']:
            add_secret()
        elif arg in ['--view', '-v']:
            view_secrets()
        elif arg in ['--edit', '-e']:
            edit_secret()
        elif arg in ['--delete', '-d']:
            delete_secrets()
        elif arg in ['--help', '-h']:
            show_help()
        else:
            print(f"{Colors.RED}Unknown command: {arg}{Colors.NC}")
            print(f"Use '{Colors.CYAN}secret --help{Colors.NC}' for usage information\n")
            sys.exit(1)

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print(f"\n{Colors.GRAY}Goodbye! 👋{Colors.NC}\n")
        sys.exit(0)
