#!/usr/bin/env bash

function safe_source() {
    local file="$1"
    local description="${2:-$file}"
    
    [[ -z "$file" ]] && return 1
    
    if [[ ! -f "$file" ]]; then
        echo.error "File not found: $file"
        echo "$(date '+%Y-%m-%d %H:%M:%S') [ERROR] File not found: $file" >> "$DOTFILES_ERROR_LOG"
        return 1
    fi
    
    if [[ ! -r "$file" ]]; then
        echo.error "File not readable: $file"
        echo "$(date '+%Y-%m-%d %H:%M:%S') [ERROR] File not readable: $file" >> "$DOTFILES_ERROR_LOG"
        return 1
    fi
    
    (
        set -euo pipefail
        trap 'echo "$(date '+%Y-%m-%d %H:%M:%S') [ERROR] Failed to source: $file (line $LINENO)" >> "$DOTFILES_ERROR_LOG"' ERR
        
        source "$file"
    ) 2>/dev/null
    
    local result=$?
    
    if [[ $result -eq 0 ]]; then
        [[ "$DOTFILES_DEBUG" == "1" ]] && echo.debug "Sourced: $description"
        return 0
    else
        echo.error "Failed to source: $description"
        echo "$(date '+%Y-%m-%d %H:%M:%S') [ERROR] Failed to source: $file (exit code: $result)" >> "$DOTFILES_ERROR_LOG"
        return $result
    fi
}

function safe_source_dir() {
    local dir="$1"
    local pattern="${2:-*}"
    local description="${3:-modules in $dir}"
    
    [[ ! -d "$dir" ]] && return 0
    
    local count=0
    local failed=0
    
    for file in "$dir"/$pattern; do
        [[ ! -f "$file" ]] && continue
        [[ ! -x "$file" ]] && chmod +x "$file"
        
        count=$((count + 1))
        
        if safe_source "$file" "$(basename "$file")"; then
            echo.success "Loaded $(basename "$file")"
        else
            failed=$((failed + 1))
            echo.warning "Skipped $(basename "$file")"
        fi
    done
    
    if [[ $count -gt 0 ]]; then
        echo.info "Loaded $((count - failed))/$count $description"
    fi
    
    return 0
}

function safe_eval() {
    local command="$1"
    local description="${2:-command}"
    
    (
        set -euo pipefail
        trap 'echo "$(date '+%Y-%m-%d %H:%M:%S') [ERROR] Failed to eval: $command" >> "$DOTFILES_ERROR_LOG"' ERR
        
        eval "$command"
    ) 2>/dev/null
    
    local result=$?
    
    if [[ $result -eq 0 ]]; then
        [[ "$DOTFILES_DEBUG" == "1" ]] && echo.debug "Executed: $description"
        return 0
    else
        echo.error "Failed to execute: $description"
        echo "$(date '+%Y-%m-%d %H:%M:%S') [ERROR] Failed to eval: $command (exit code: $result)" >> "$DOTFILES_ERROR_LOG"
        return $result
    fi
}

function require() {
    local file="$1"
    
    if ! safe_source "$file" "$file"; then
        echo.error "Required module failed: $file"
        exit 1
    fi
}

function optional() {
    local file="$1"
    safe_source "$file" "$file" || true
}
