#!/usr/bin/env bash

function dotfiles_add_to_path() {
    if [[ -d "$DOTFILES_BIN" ]]; then
        export PATH="$DOTFILES_BIN:$PATH"
        echo.debug "Added $DOTFILES_BIN to PATH"
    fi
    
    [[ -d "$HOME/.local/bin" ]] && export PATH="$HOME/.local/bin:$PATH"
    [[ -d "$HOME/bin" ]] && export PATH="$HOME/bin:$PATH"
    [[ -d "/usr/local/go/bin" ]] && export PATH="/usr/local/go/bin:$PATH"
    [[ -d "$HOME/go/bin" ]] && export PATH="$HOME/go/bin:$PATH"
    [[ -d "$HOME/.cargo/bin" ]] && export PATH="$HOME/.cargo/bin:$PATH"
    [[ -d "$HOME/.npm-global/bin" ]] && export PATH="$HOME/.npm-global/bin:$PATH"
    
    export PATH=$(echo "$PATH" | tr ':' '\n' | awk '!seen[$0]++' | tr '\n' ':' | sed 's/:$//')
}

function dotfiles_setup_shell() {
    if [[ "$DOTFILES_SHELL" == "bash" ]] && [[ -n "${BASH_VERSION}" ]]; then
        shopt -s histappend 2>/dev/null || true
        shopt -s checkwinsize 2>/dev/null || true
        shopt -s globstar 2>/dev/null || true
        shopt -s autocd 2>/dev/null || true
        shopt -s cdspell 2>/dev/null || true
        shopt -s dirspell 2>/dev/null || true
        shopt -s dotglob 2>/dev/null || true
        shopt -s extglob 2>/dev/null || true
        shopt -s nocaseglob 2>/dev/null || true
        
        if [[ -f /etc/bash_completion ]] && [[ -n "${BASH_VERSION}" ]]; then
            source /etc/bash_completion 2>/dev/null || true
        elif [[ -f /usr/share/bash-completion/bash_completion ]] && [[ -n "${BASH_VERSION}" ]]; then
            source /usr/share/bash-completion/bash_completion 2>/dev/null || true
        fi
        
    elif [[ "$DOTFILES_SHELL" == "zsh" ]]; then
        setopt AUTO_CD
        setopt AUTO_PUSHD
        setopt PUSHD_IGNORE_DUPS
        setopt PUSHD_SILENT
        # setopt CORRECT          # Disabled: command correction
        # setopt CORRECT_ALL      # Disabled: argument correction
        setopt GLOB_COMPLETE
        setopt EXTENDED_GLOB
        setopt NO_CASE_GLOB
        setopt NUMERIC_GLOB_SORT
        setopt HIST_IGNORE_ALL_DUPS
        setopt HIST_SAVE_NO_DUPS
        setopt HIST_REDUCE_BLANKS
        setopt INC_APPEND_HISTORY
        setopt SHARE_HISTORY
        setopt HIST_VERIFY
        setopt INTERACTIVE_COMMENTS
        setopt COMPLETE_IN_WORD
        setopt ALWAYS_TO_END
        setopt PATH_DIRS
        setopt AUTO_MENU
        setopt AUTO_LIST
        setopt AUTO_PARAM_SLASH
        setopt EXTENDED_HISTORY
        setopt NO_BEEP
        
        autoload -Uz compinit && compinit -i
        autoload -Uz bashcompinit && bashcompinit
        
        # Fish-like completion configuration
        zstyle ':completion:*' menu select                    # Arrow key navigation
        zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' 'r:|=*' 'l:|=* r:|=*'
        zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"  # Use LS_COLORS for consistency
        zstyle ':completion:*' rehash true
        zstyle ':completion:*' accept-exact '*(N)'
        zstyle ':completion:*' use-cache on
        zstyle ':completion:*' cache-path ~/.cache/zsh
        zstyle ':completion:*' group-name ''                  # Group completions
        zstyle ':completion:*' verbose yes                    # Verbose descriptions
        zstyle ':completion:*' special-dirs true              # Complete ./ and ../
        zstyle ':completion:*' squeeze-slashes true           # Clean up paths
        
        # Fish-like formatting with colors
        zstyle ':completion:*:descriptions' format '%F{cyan}[%d]%f'
        zstyle ':completion:*:warnings' format '%F{red}No matches found%f'
        zstyle ':completion:*:messages' format '%F{yellow}%d%f'
        zstyle ':completion:*:corrections' format '%F{magenta}%d (errors: %e)%f'
        
        # Better process completion (like fish)
        zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#) ([0-9a-z-]#)*=01;34=0=01'
        zstyle ':completion:*:*:*:*:processes' command "ps -u $USER -o pid,user,comm -w -w"
        
        # Enhanced directory navigation
        zstyle ':completion:*:*:cd:*' tag-order local-directories directory-stack path-directories
        zstyle ':completion:*:*:cd:*:directory-stack' menu yes select
        zstyle ':completion:*:-tilde-:*' group-order 'named-directories' 'path-directories' 'users' 'expand'
        zstyle ':completion:*' users remcostoeten root
    fi
}

function dotfiles_load_modules() {
    echo.debug "Loading modules..."
    
    local modules_config="$DOTFILES_UTILS/modules.json"
    
    # Load traditional loaders first for backward compatibility
    safe_source_dir "$DOTFILES_MODULES/loaders" "*.sh" "module loaders"
    
    # Load configuration-based modules if config exists
    if [[ -f "$modules_config" ]]; then
        echo.debug "Using configuration-based module loading"
        
        # Load enabled modules
        local enabled_modules=$(jq -r '.modules | to_entries[] | select(.value.enabled == true) | .key' "$modules_config" 2>/dev/null)
        while read -r module; do
            [[ -n "$module" ]] && safe_source "$DOTFILES_MODULES/$module" "module: $module"
        done <<< "$enabled_modules"
        
        # Load enabled plugins
        local enabled_plugins=$(jq -r '.plugins | to_entries[] | select(.value.enabled == true) | .key' "$modules_config" 2>/dev/null)
        while read -r plugin; do
            [[ -n "$plugin" ]] && safe_source "$DOTFILES_MODULES/plugins/$plugin" "plugin: $plugin"
        done <<< "$enabled_plugins"
        
        # Load enabled alias files
        local enabled_aliases=$(jq -r '.aliases | to_entries[] | select(.value.enabled == true) | .value.file // .key' "$modules_config" 2>/dev/null)
        while read -r alias_file; do
            [[ -n "$alias_file" ]] && safe_source "$DOTFILES_MODULES/aliases/$alias_file" "aliases: $alias_file"
        done <<< "$enabled_aliases"
        
    else
        echo.debug "Using legacy module loading (enabled/disabled directories)"
        # Fallback to old method if config doesn't exist
        safe_source_dir "$DOTFILES_MODULES/enabled" "*" "enabled modules"
        
        # Load loaders silently - they handle their own output
        if [[ -f "$DOTFILES_MODULES/alias-loader" ]]; then
            source "$DOTFILES_MODULES/alias-loader" 2>/dev/null || echo.debug "Alias loader completed"
        fi
        
        if [[ -f "$DOTFILES_MODULES/plugin-loader" ]]; then
            source "$DOTFILES_MODULES/plugin-loader" 2>/dev/null || echo.debug "Plugin loader completed"
        fi
        
        if [[ -f "$DOTFILES_MODULES/script-loader" ]]; then
            source "$DOTFILES_MODULES/script-loader" 2>/dev/null || echo.debug "Script loader completed"
        fi
    fi
    
    safe_source_dir "$HOME/.config/dotfiles-local/modules" "*.sh" "local modules"
}

function dotfiles_load_sourcers() {
    echo.debug "Loading sourcers..."
    safe_source_dir "$DOTFILES_ROOT/sourcers" "*" "sourcers"
}

function dotfiles_load_configs() {
    safe_source_dir "$DOTFILES_CONFIG" "*.sh" "config files"
}



function dotfiles_setup_prompt() {
    # Skip prompt setup if starship is managing it
    if [[ "$DOTFILES_PROMPT_MANAGER" == "starship" ]]; then
        echo.debug "Prompt managed by starship, skipping fallback setup"
        return 0
    fi
    
    # Fallback to custom prompts if Starship is not available
    if [[ "$DOTFILES_SHELL" == "bash" ]]; then
        if [[ -f "$DOTFILES_MODULES/enabled/prompt-bash" ]]; then
            safe_source "$DOTFILES_MODULES/enabled/prompt-bash"
        else
            PS1='\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
        fi
        
    elif [[ "$DOTFILES_SHELL" == "zsh" ]]; then
        if [[ -f "$DOTFILES_MODULES/enabled/prompt-zsh" ]]; then
            safe_source "$DOTFILES_MODULES/enabled/prompt-zsh"
        else
            autoload -U colors && colors
            PS1="%{$fg[green]%}%n@%m%{$reset_color%}:%{$fg[blue]%}%~%{$reset_color%}$ "
        fi
    fi
}

function dotfiles_check_sync_status() {
    local warnings=()
    
    # Check for uncommitted git changes (use subshell to preserve current directory)
    if (cd "$DOTFILES_ROOT" 2>/dev/null && git rev-parse --is-inside-work-tree >/dev/null 2>&1); then
        if (cd "$DOTFILES_ROOT" && ! git diff --quiet 2>/dev/null) || (cd "$DOTFILES_ROOT" && ! git diff --cached --quiet 2>/dev/null); then
            warnings+=("📝 Uncommitted changes")
        fi
        
        # Check for untracked files
        if [[ -n "$(cd "$DOTFILES_ROOT" && git ls-files --others --exclude-standard 2>/dev/null)" ]]; then
            warnings+=("🆕 Untracked files")
        fi
    fi
    
    # Check for unsynced environment variables
    if [[ -f "$DOTFILES_ENV_DB" ]]; then
        local env_count=$(jq 'length' "$DOTFILES_ENV_DB" 2>/dev/null || echo 0)
        if [[ "$env_count" -gt 0 ]]; then
            # Check if there's a sync marker indicating env vars need syncing
            if [[ -f "$DOTFILES_UTILS/sync-needed" ]]; then
                warnings+=("🔄 Environment sync needed")
            fi
        fi
    fi
    
    # Export warnings for banner use
    if [[ ${#warnings[@]} -gt 0 ]]; then
        export DOTFILES_SYNC_WARNINGS="$(printf '%s; ' "${warnings[@]}" | sed 's/; $//')"
        return 1
    else
        unset DOTFILES_SYNC_WARNINGS
        return 0
    fi
}

function dotfiles_bootstrap() {
    ensure_dir "$DOTFILES_LOGS"
    ensure_dir "$DOTFILES_UTILS"
    ensure_dir "$DOTFILES_BIN"
    ensure_dir "$DOTFILES_MODULES"
    ensure_dir "$DOTFILES_MODULES/aliases"
    ensure_dir "$DOTFILES_MODULES/plugins"
    ensure_dir "$DOTFILES_MODULES/scripts"
    ensure_dir "$DOTFILES_CONFIG"
    ensure_dir "$DOTFILES_TEMPLATES"
    
    ensure_file "$DOTFILES_LINKS_DB" "{}"
    ensure_file "$DOTFILES_ENV_DB" "{}"
    ensure_file "$DOTFILES_STATE" '{"version":"'$DOTFILES_VERSION'","last_update":"'$(date -Iseconds)'"}'
    
    dotfiles_add_to_path
    dotfiles_setup_shell
    dotfiles_load_configs
    dotfiles_load_sourcers
    dotfiles_load_modules
    dotfiles_setup_prompt
    
    if command -v direnv &>/dev/null; then
        eval "$(direnv hook $DOTFILES_SHELL)"
    fi
    
    if [[ -f "$HOME/.fzf.$DOTFILES_SHELL" ]]; then
        source "$HOME/.fzf.$DOTFILES_SHELL"
    fi
    
    if [[ -f "$HOME/.config/dotfiles-local/init" ]]; then
        safe_source "$HOME/.config/dotfiles-local/init" "local customizations"
    fi
    
    # Check sync status before showing banner
    dotfiles_check_sync_status >/dev/null 2>&1 || true
    
    # Show banner if available
    if command -v echo.dotfiles_banner >/dev/null 2>&1; then
        echo.dotfiles_banner
    fi
}
