#!/usr/bin/env bash

function dotfiles_add_to_path() {
    if [[ -d "$DOTFILES_BIN" ]]; then
        export PATH="$DOTFILES_BIN:$PATH"
        echo.debug "Added $DOTFILES_BIN to PATH"
    fi
    
    [[ -d "$HOME/.local/bin" ]] && export PATH="$HOME/.local/bin:$PATH"
    [[ -d "$HOME/bin" ]] && export PATH="$HOME/bin:$PATH"
    [[ -d "/usr/local/go/bin" ]] && export PATH="/usr/local/go/bin:$PATH"
    [[ -d "$HOME/go/bin" ]] && export PATH="$HOME/go/bin:$PATH"
    [[ -d "$HOME/.cargo/bin" ]] && export PATH="$HOME/.cargo/bin:$PATH"
    [[ -d "$HOME/.npm-global/bin" ]] && export PATH="$HOME/.npm-global/bin:$PATH"
    
    export PATH=$(echo "$PATH" | tr ':' '\n' | awk '!seen[$0]++' | tr '\n' ':' | sed 's/:$//')
}

function dotfiles_setup_shell() {
    if [[ "$DOTFILES_SHELL" == "bash" ]] && [[ -n "${BASH_VERSION}" ]]; then
        shopt -s histappend 2>/dev/null || true
        shopt -s checkwinsize 2>/dev/null || true
        shopt -s globstar 2>/dev/null || true
        shopt -s autocd 2>/dev/null || true
        shopt -s cdspell 2>/dev/null || true
        shopt -s dirspell 2>/dev/null || true
        shopt -s dotglob 2>/dev/null || true
        shopt -s extglob 2>/dev/null || true
        shopt -s nocaseglob 2>/dev/null || true
        
        if [[ -f /etc/bash_completion ]] && [[ -n "${BASH_VERSION}" ]]; then
            source /etc/bash_completion 2>/dev/null || true
        elif [[ -f /usr/share/bash-completion/bash_completion ]] && [[ -n "${BASH_VERSION}" ]]; then
            source /usr/share/bash-completion/bash_completion 2>/dev/null || true
        fi
        
    elif [[ "$DOTFILES_SHELL" == "zsh" ]]; then
        setopt AUTO_CD
        setopt AUTO_PUSHD
        setopt PUSHD_IGNORE_DUPS
        setopt PUSHD_SILENT
        setopt CORRECT
        setopt CORRECT_ALL
        setopt GLOB_COMPLETE
        setopt EXTENDED_GLOB
        setopt NO_CASE_GLOB
        setopt NUMERIC_GLOB_SORT
        setopt HIST_IGNORE_ALL_DUPS
        setopt HIST_SAVE_NO_DUPS
        setopt HIST_REDUCE_BLANKS
        setopt INC_APPEND_HISTORY
        setopt SHARE_HISTORY
        setopt HIST_VERIFY
        setopt INTERACTIVE_COMMENTS
        setopt COMPLETE_IN_WORD
        setopt ALWAYS_TO_END
        setopt PATH_DIRS
        setopt AUTO_MENU
        setopt AUTO_LIST
        setopt AUTO_PARAM_SLASH
        setopt EXTENDED_HISTORY
        setopt NO_BEEP
        
        autoload -Uz compinit && compinit -i
        autoload -Uz bashcompinit && bashcompinit
        
        zstyle ':completion:*' menu select
        zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' 'r:|=*' 'l:|=* r:|=*'
        zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"
        zstyle ':completion:*' rehash true
        zstyle ':completion:*' accept-exact '*(N)'
        zstyle ':completion:*' use-cache on
        zstyle ':completion:*' cache-path ~/.cache/zsh
        zstyle ':completion:*:descriptions' format '%U%B%d%b%u'
        zstyle ':completion:*:warnings' format '%BSorry, no matches for: %d%b'
    fi
}

function dotfiles_load_modules() {
    echo.debug "Loading modules..."
    
    safe_source_dir "$DOTFILES_MODULES/loaders" "*.sh" "module loaders"
    
    safe_source_dir "$DOTFILES_MODULES/enabled" "*.sh" "enabled modules"
    
    # Load loaders silently - they handle their own output
    if [[ -f "$DOTFILES_MODULES/alias-loader" ]]; then
        source "$DOTFILES_MODULES/alias-loader" 2>/dev/null || echo.debug "Alias loader completed"
    fi
    
    if [[ -f "$DOTFILES_MODULES/plugin-loader" ]]; then
        source "$DOTFILES_MODULES/plugin-loader" 2>/dev/null || echo.debug "Plugin loader completed"
    fi
    
    if [[ -f "$DOTFILES_MODULES/script-loader" ]]; then
        source "$DOTFILES_MODULES/script-loader" 2>/dev/null || echo.debug "Script loader completed"
    fi
    
    safe_source_dir "$HOME/.config/dotfiles-local/modules" "*.sh" "local modules"
}

function dotfiles_load_configs() {
    safe_source_dir "$DOTFILES_CONFIG" "*.sh" "config files"
}



function dotfiles_setup_prompt() {
    # Initialize Starship prompt if available (works with both bash and zsh)
    if command -v starship &>/dev/null; then
        if [[ "$DOTFILES_SHELL" == "bash" ]]; then
            eval "$(starship init bash)"
            echo.debug "Initialized Starship prompt for bash"
        elif [[ "$DOTFILES_SHELL" == "zsh" ]]; then
            eval "$(starship init zsh)"
            echo.debug "Initialized Starship prompt for zsh"
        fi
        return 0
    fi
    
    # Fallback to custom prompts if Starship is not available
    if [[ "$DOTFILES_SHELL" == "bash" ]]; then
        if [[ -f "$DOTFILES_MODULES/enabled/prompt-bash" ]]; then
            safe_source "$DOTFILES_MODULES/enabled/prompt-bash"
        else
            PS1='\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
        fi
        
    elif [[ "$DOTFILES_SHELL" == "zsh" ]]; then
        if [[ -f "$DOTFILES_MODULES/enabled/prompt-zsh" ]]; then
            safe_source "$DOTFILES_MODULES/enabled/prompt-zsh"
        else
            autoload -U colors && colors
            PS1="%{$fg[green]%}%n@%m%{$reset_color%}:%{$fg[blue]%}%~%{$reset_color%}$ "
        fi
    fi
}

function dotfiles_bootstrap() {
    ensure_dir "$DOTFILES_LOGS"
    ensure_dir "$DOTFILES_UTILS"
    ensure_dir "$DOTFILES_BIN"
    ensure_dir "$DOTFILES_MODULES/enabled"
    ensure_dir "$DOTFILES_MODULES/disabled"
    ensure_dir "$DOTFILES_CONFIG"
    ensure_dir "$DOTFILES_TEMPLATES"
    
    ensure_file "$DOTFILES_LINKS_DB" "{}"
    ensure_file "$DOTFILES_ENV_DB" "{}"
    ensure_file "$DOTFILES_STATE" '{"version":"'$DOTFILES_VERSION'","last_update":"'$(date -Iseconds)'"}'
    
    dotfiles_add_to_path
    dotfiles_setup_shell
    dotfiles_load_configs
    dotfiles_load_modules
    dotfiles_setup_prompt
    
    if command -v direnv &>/dev/null; then
        eval "$(direnv hook $DOTFILES_SHELL)"
    fi
    
    if [[ -f "$HOME/.fzf.$DOTFILES_SHELL" ]]; then
        source "$HOME/.fzf.$DOTFILES_SHELL"
    fi
    
    if [[ -f "$HOME/.config/dotfiles-local/init" ]]; then
        safe_source "$HOME/.config/dotfiles-local/init" "local customizations"
    fi
}
